{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-architecture-components/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"07d1fdb1-e6e6-5a02-9cd3-1ed9ba368203","excerpt":"记录一下分析出品的库(ps:不是音频)，下面是官方地址\nhttps://developer.android.com/topic/libraries/architecture/index.html?hl=zh-cn Lifecycles…","html":"<p>记录一下分析<code class=\"language-text\">Google</code>出品的<code class=\"language-text\">AAC</code>库(ps:不是音频)，下面是官方地址\n<a href=\"https://developer.android.com/topic/libraries/architecture/index.html?hl=zh-cn\">https://developer.android.com/topic/libraries/architecture/index.html?hl=zh-cn</a></p>\n<!-- More -->\n<h1>Lifecycles</h1>\n<h2>使用</h2>\n<p>这是一个用于管理<code class=\"language-text\">UI</code>组件生命周期和处理数据持久化的库，要使用这个库，需要手动拉下依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">allprojects <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.google.com'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//For Lifecycles, LiveData, and ViewModel</span>\ncompile <span class=\"token string\">'android.arch.lifecycle:runtime:1.0.0-alpha5'</span>\ncompile <span class=\"token string\">'android.arch.lifecycle:extensions:1.0.0-alpha5'</span>\nannotationProcessor <span class=\"token string\">'android.arch.lifecycle:compiler:1.0.0-alpha5'</span></code></pre></div>\n<blockquote>\n<p>运行发现这三句都要添加</p>\n</blockquote>\n<p>首先说下<code class=\"language-text\">Lifecycles</code>这块，这一模块旨在帮助没有生命周期的类能够方便的监听生命周期的变化，从而减少内存泄露的出现，使用的方法非常简单，官方提供了<code class=\"language-text\">LifecycleRegistryOwner</code>接口可以让你的<code class=\"language-text\">Activity</code>或者<code class=\"language-text\">Fragment</code>实现，其后实例化<code class=\"language-text\">LifecycleRegistry</code>即可</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleRegistryOwner</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LifecycleRegistry</span> mLifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LifecycleRegistry</span> <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mLifecycleRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后则新建一个<code class=\"language-text\">Observer</code>（没有生命周期的类）去继承<code class=\"language-text\">LifecycleObserver</code>，并使用<code class=\"language-text\">@OnLifecycleEvent</code>注解方法指定需要监听的生命周期</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourObserver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleObserver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"YourObserver\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_ANY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAny</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleOwner</span> owner<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onAny: owner === \"</span> <span class=\"token operator\">+</span> owner <span class=\"token operator\">+</span> <span class=\"token string\">\" event === \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onResume: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onPause: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后调用<code class=\"language-text\">LifecycleRegistry.addObserver()</code>进行绑定即可让<code class=\"language-text\">Observer</code>也获取相应的生命周期回调</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">YourObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>分析</h2>\n<p>使用起来的确很简单，接下来就是开始分析，首先第一个问题是为什么<code class=\"language-text\">Observer</code>能够得到跟<code class=\"language-text\">Activity</code>一样的生命周期回调，先从<code class=\"language-text\">addObserver</code>读起</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleObserver</span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObserverWithState</span> observerWithState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObserverWithState</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mObserverSet<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">,</span> observerWithState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        observerWithState<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里将<code class=\"language-text\">Observer</code>传进来之后会实例化一个<code class=\"language-text\">ObserverWithState</code>，然后放进一个<code class=\"language-text\">Map</code>保存起来，最后调用<code class=\"language-text\">sync</code>，先看看这个<code class=\"language-text\">ObserverWithState</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ObserverWithState</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">State</span> mObserverCurrentState <span class=\"token operator\">=</span> INITIALIZED<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">GenericLifecycleObserver</span> mCallback<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ObserverWithState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleObserver</span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mCallback <span class=\"token operator\">=</span> <span class=\"token class-name\">Lifecycling</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallback</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mState <span class=\"token operator\">==</span> DESTROYED <span class=\"token operator\">&amp;&amp;</span> mObserverCurrentState <span class=\"token operator\">==</span> INITIALIZED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mObserverCurrentState <span class=\"token operator\">=</span> DESTROYED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mObserverCurrentState <span class=\"token operator\">!=</span> mState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Event</span> event <span class=\"token operator\">=</span> mObserverCurrentState<span class=\"token punctuation\">.</span><span class=\"token function\">isAtLeast</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">?</span> <span class=\"token function\">downEvent</span><span class=\"token punctuation\">(</span>mObserverCurrentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">upEvent</span><span class=\"token punctuation\">(</span>mObserverCurrentState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mObserverCurrentState <span class=\"token operator\">=</span> <span class=\"token function\">getStateAfter</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>mLifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个<code class=\"language-text\">GenericLifecycleObserver</code>是什么鬼，进去<code class=\"language-text\">Lifecycling</code>看下</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">GenericLifecycleObserver</span> <span class=\"token function\">getCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">GenericLifecycleObserver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericLifecycleObserver</span><span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//noinspection TryWithIdenticalCatches</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> klass <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericLifecycleObserver</span><span class=\"token punctuation\">></span></span> cachedConstructor <span class=\"token operator\">=</span> sCallbackCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n                    klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedConstructor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> cachedConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cachedConstructor <span class=\"token operator\">=</span> <span class=\"token function\">getGeneratedAdapterConstructor</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedConstructor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cachedConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">isAccessible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cachedConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cachedConstructor <span class=\"token operator\">=</span> sREFLECTIVE<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            sCallbackCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">,</span> cachedConstructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> cachedConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看出这里用了反射以<code class=\"language-text\">Observer</code>新建了个类<code class=\"language-text\">GenericLifecycleObserver</code>，这个类可以在<code class=\"language-text\">build/source</code>下找到</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourObserver_LifecycleAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GenericLifecycleObserver</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">YourObserver</span> mReceiver<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">YourObserver_LifecycleAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">YourObserver</span> receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mReceiver <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleOwner</span> owner<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mReceiver<span class=\"token punctuation\">.</span><span class=\"token function\">onAny</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> <span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mReceiver<span class=\"token punctuation\">.</span><span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> <span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      mReceiver<span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> mReceiver<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看到<code class=\"language-text\">onStateChanged</code>方法下是实现就反应过来<code class=\"language-text\">YourObserver</code>的方法会响应生命周期的变化就是这里被调用的，所以继续看哪里调用了<code class=\"language-text\">onStateChanged</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mState <span class=\"token operator\">==</span> DESTROYED <span class=\"token operator\">&amp;&amp;</span> mObserverCurrentState <span class=\"token operator\">==</span> INITIALIZED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mObserverCurrentState <span class=\"token operator\">=</span> DESTROYED<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mObserverCurrentState <span class=\"token operator\">!=</span> mState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Event</span> event <span class=\"token operator\">=</span> mObserverCurrentState<span class=\"token punctuation\">.</span><span class=\"token function\">isAtLeast</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">?</span> <span class=\"token function\">downEvent</span><span class=\"token punctuation\">(</span>mObserverCurrentState<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">upEvent</span><span class=\"token punctuation\">(</span>mObserverCurrentState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mObserverCurrentState <span class=\"token operator\">=</span> <span class=\"token function\">getStateAfter</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mCallback<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>mLifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>额，这不就是刚才的<code class=\"language-text\">ObserverWithState</code>吗，原来在这里被调用，通过判断<code class=\"language-text\">mObserverCurrentState != mState</code>是否成立一直循环执行，所以可以指向<code class=\"language-text\">mState</code>，这个状态变化从而影响<code class=\"language-text\">sync()</code>从而调用<code class=\"language-text\">mCallback.onStateChanged</code>从而执行<code class=\"language-text\">YourObserver</code>的方法实现生命周期检测，那么继续看哪里改变了<code class=\"language-text\">mState</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * Only marks the current state as the given value. It doesn't dispatch any event to its\n     * listeners.\n     *\n     * @param state new state\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">markState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mState <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Sets the current state and notifies the observers.\n     * &lt;p>\n     * Note that if the {@code currentState} is the same state as the last call to this method,\n     * calling this method has no effect.\n     *\n     * @param event The event that was received\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLastEvent <span class=\"token operator\">==</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mLastEvent <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n        mState <span class=\"token operator\">=</span> <span class=\"token function\">getStateAfter</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LifecycleObserver</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObserverWithState</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> mObserverSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>啊哈，<code class=\"language-text\">markState()</code>只是单纯的改变<code class=\"language-text\">mState</code>，<code class=\"language-text\">handleLifecycleEvent()</code>不仅改变了<code class=\"language-text\">mState</code>，还遍历之前的<code class=\"language-text\">Map</code>再次执行<code class=\"language-text\">sync()</code>从而通知<code class=\"language-text\">Observer</code>生命周期的变化，继续往下看</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchIfLifecycleOwner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fragment</span> fragment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fragment <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleRegistryOwner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleRegistryOwner</span><span class=\"token punctuation\">)</span> fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这部分代码在<code class=\"language-text\">LifecycleDispatcher</code>这个类找到，<code class=\"language-text\">dispatchIfLifecycleOwner</code>被调用的地方有四个，指向到<code class=\"language-text\">FragmentCallback</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FragmentCallback</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FragmentManager</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">FragmentLifecycleCallbacks</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFragmentCreated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentManager</span> fm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fragment</span> f<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatchIfLifecycleOwner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleRegistryOwner</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">getChildFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentByTag</span><span class=\"token punctuation\">(</span>REPORT_FRAGMENT_TAG<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                f<span class=\"token punctuation\">.</span><span class=\"token function\">getChildFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DestructionReportFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        REPORT_FRAGMENT_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFragmentStarted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentManager</span> fm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fragment</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatchIfLifecycleOwner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onFragmentResumed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentManager</span> fm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Fragment</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatchIfLifecycleOwner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> ON_RESUME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>看到<code class=\"language-text\">FragmentCallback</code>继承的是<code class=\"language-text\">FragmentManager.FragmentLifecycleCallbacks</code>就明白了，继续看</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatcherActivityCallback</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EmptyActivityLifecycleCallbacks</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">FragmentCallback</span> mFragmentCallback<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">DispatcherActivityCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mFragmentCallback <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityCreated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">registerFragmentLifecycleCallbacks</span><span class=\"token punctuation\">(</span>mFragmentCallback<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">ReportFragment</span><span class=\"token punctuation\">.</span><span class=\"token function\">injectIfNeededIn</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityStopped</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">markState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">,</span> CREATED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivitySaveInstanceState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> outState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">markState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span><span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">,</span> CREATED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">FragmentCallback</code>在<code class=\"language-text\">DispatcherActivityCallback</code>构造方法中被实例化，继续</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sInitialized<span class=\"token punctuation\">.</span><span class=\"token function\">getAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherActivityCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>哈哈，之所以<code class=\"language-text\">Observer</code>能够响应生命周期的回调，一切源头就在这里，通过对<code class=\"language-text\">Application</code>注册<code class=\"language-text\">Application.ActivityLifecycleCallbacks</code>监听所有<code class=\"language-text\">Activity</code>的生命周期回调，从而调用<code class=\"language-text\">sync()</code>、调用<code class=\"language-text\">mCallback.onStateChanged()</code>通知<code class=\"language-text\">Observer</code>生命周期的变化。那么这个<code class=\"language-text\">init</code>是在哪里调用的呢</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LifecycleRuntimeTrojanProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ContentProvider</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LifecycleDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProcessLifecycleOwner</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>哇，原来官方利用了<code class=\"language-text\">ContentProvider</code>的特性，在创建的时候就注册了<code class=\"language-text\">Application.ActivityLifecycleCallbacks</code>，才有后面的可能。至于<code class=\"language-text\">ContentProvider</code>的注册，实际利用<code class=\"language-text\">Gradle</code>的合并<code class=\"language-text\">manifest</code>特性，相关资料看这里<a href=\"https://developer.android.com/studio/build/manifest-merge.html?hl=zh-cn#_2\">https://developer.android.com/studio/build/manifest-merge.html?hl=zh-cn#_2</a>，合并后的<code class=\"language-text\">manifest</code>可以在<code class=\"language-text\">build/intermediates/manifests</code>下找到</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>provider\n            android<span class=\"token operator\">:</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"android.arch.lifecycle.LifecycleRuntimeTrojanProvider\"</span>\n            android<span class=\"token operator\">:</span>authorities<span class=\"token operator\">=</span><span class=\"token string\">\"com.zyhang.testLifecycle.lifecycle-trojan\"</span>\n            android<span class=\"token operator\">:</span>exported<span class=\"token operator\">=</span><span class=\"token string\">\"false\"</span>\n            android<span class=\"token operator\">:</span>multiprocess<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h3>ProcessLifecycleOwner</h3>\n<p>看向<code class=\"language-text\">LifecycleRuntimeTrojanProvider.onCreate</code>，实现了两个<code class=\"language-text\">init</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LifecycleDispatcher</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ProcessLifecycleOwner</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中<code class=\"language-text\">LifecycleDispatcher.init</code>则是我们逆推来的，其原理是利用<code class=\"language-text\">Application</code>的<code class=\"language-text\">registerActivityLifecycleCallbacks()</code>注册<code class=\"language-text\">Activity</code>生命周期监听，再根据判断<code class=\"language-text\">if (activity instanceof FragmentActivity)</code>继续调用<code class=\"language-text\">FragmentManager.registerFragmentLifecycleCallbacks</code>注册<code class=\"language-text\">Fragment</code>生命周期监听，最后都是调用<code class=\"language-text\">LifecycleRegistryOwner.handleLifecycleEvent</code>去通知各个<code class=\"language-text\">Observer</code>的方法从而管理生命周期。</p>\n<p>还有一个<code class=\"language-text\">ProcessLifecycleOwner</code>是干嘛的呢，Let’s go</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProcessLifecycleOwner</span> sInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessLifecycleOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LifecycleRegistry</span> mRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sInstance<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Application</span> app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityCreated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ReportFragment</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProcessListener</span><span class=\"token punctuation\">(</span>mInitializationListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPaused</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">activityPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityStopped</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Activity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">activityStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>竟然是一个<code class=\"language-text\">sInstance</code>静态实例，最终同样是向<code class=\"language-text\">Application</code>注册生命周期监听，道理是一样的，但是与<code class=\"language-text\">LifecycleDispatcher</code>不同的是这里维护了一个自己的<code class=\"language-text\">Registry</code>并且<code class=\"language-text\">activityPaused</code>时调用<code class=\"language-text\">handleLifecycleEvent</code>的时机也是通过一个<code class=\"language-text\">Handler</code>并延时 700ms 执行，为什么这样做呢，看到了<code class=\"language-text\">ProcessLifecycleOwner</code>的注释</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Class that provides lifecycle for the whole application process.\n * &lt;p>\n * You can consider this LifecycleOwner as the composite of all of your Activities, except that\n * {@link Lifecycle.Event#ON_CREATE} will be dispatched once and {@link Lifecycle.Event#ON_DESTROY}\n * will never be dispatched. Other lifecycle events will be dispatched with following rules:\n * ProcessLifecycleOwner will dispatch {@link Lifecycle.Event#ON_START},\n * {@link Lifecycle.Event#ON_RESUME} events, as a first activity moves through these events.\n * {@link Lifecycle.Event#ON_PAUSE}, {@link Lifecycle.Event#ON_STOP}, events will be dispatched with\n * a &lt;b>delay&lt;/b> after a last activity\n * passed through them. This delay is long enough to guarantee that ProcessLifecycleOwner\n * won't send any events if activities are destroyed and recreated due to a\n * configuration change.\n *\n * &lt;p>\n * It is useful for use cases where you would like to react on your app coming to the foreground or\n * going to the background and you don't need a milliseconds accuracy in receiving lifecycle\n * events.\n */</span></code></pre></div>\n<p>该类同样拥有<code class=\"language-text\">Activity</code>的生命周期的监听，但是会忽略掉<code class=\"language-text\">ON_DESTROY</code>，其中比较特殊的是<code class=\"language-text\">ON_PAUSE</code>会延迟 700ms 再执行<code class=\"language-text\">handleLifecycleEvent</code>，官方解释是这个延时足够确保当<code class=\"language-text\">Activity</code>销毁或者重建(比如旋转屏幕)时不会发生<code class=\"language-text\">ON_PAUSE</code>事件，这也可以非常简单的判断应用是否进入后台等情景。</p>","frontmatter":{"title":"Android Architecture Components分析记录（一）","date":"August 10, 2017","tags":["aac"],"categories":"Android"}}},"pageContext":{"slug":"/android-architecture-components/","previous":{"excerpt":"…","fields":{"slug":"/bubble-of-seekbar/"},"frontmatter":{"date":"August 09, 2017","title":"为SeekBar添加滑动跟随气泡","tags":["seekBar"],"categories":"Android"}},"next":{"excerpt":"记录分析第二篇---，官方地址\nhttps://developer.android.com/topic/libraries/architecture/livedata.html?hl=zh-cn LiveData…","fields":{"slug":"/android-architecture-components-2/"},"frontmatter":{"date":"August 16, 2017","title":"Android Architecture Components分析记录（二）","tags":["aac"],"categories":"Android"}}}},"staticQueryHashes":["2841359383"]}