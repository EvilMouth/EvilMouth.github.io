{"componentChunkName":"component---src-templates-blog-post-js","path":"/arouter-autowired-zi-dong-zhu-ru/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"1d5773b5-5d1d-5203-b89d-2b71f16abd45","excerpt":"前言 ARouter 有一个@Autowired 的注解，能自动帮我们赋值一些变量，例如 通过就能将 Activity 传输的一些值自动帮我们赋值上对应变量，省去我们手动去调用 inject(this) 那么看下它做了什么，翻了几下发现，ARouter 会做以下几步操作\n1、APT 编译期间扫描@Autowired…","html":"<h2>前言</h2>\n<p>ARouter 有一个@Autowired 的注解，能自动帮我们赋值一些变量，例如</p>\n<!-- More -->\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainFragment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arouter</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过<code class=\"language-text\">Arouter.getInstance().inject(this);</code>就能将 Activity 传输的一些值自动帮我们赋值上对应变量，省去我们手动去调用<code class=\"language-text\">getIntent().getString(xxx)</code></p>\n<h2>inject(this)</h2>\n<p>那么看下它做了什么，翻了几下发现，ARouter 会做以下几步操作\n1、APT 编译期间扫描@Autowired 字段的文件并生成 MainFragment$$ARouter$$Autowired 文件</p>\n<ul>\n<li>$$ARouter$$Autowired 类实现了 ISyringe 接口，拥有一个 inject(Object)的方法，这里面就是赋值的代码</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainFragment</span>$$<span class=\"token class-name\">ARouter</span>$$<span class=\"token class-name\">Autowired</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ISyringe</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">SerializationService</span> serializationService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">MainFragment</span> substitute <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MainFragment</span><span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n    substitute<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> substitute<span class=\"token punctuation\">.</span><span class=\"token function\">getArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    substitute<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> substitute<span class=\"token punctuation\">.</span><span class=\"token function\">getArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>2、Arouter.getInstance().inject(this);则是通过反射创建了$$ARouter$$Autowired 类并调用 inject 方法实现自动赋值</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autowire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>blackList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">ISyringe</span> autowiredHelper <span class=\"token operator\">=</span> classCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> autowiredHelper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// No cache.</span>\n                    autowiredHelper <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ISyringe</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SUFFIX_AUTOWIRED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                autowiredHelper<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                classCache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">,</span> autowiredHelper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            blackList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// This instance need not autowired.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>思考</h2>\n<p>众所周知反射的性能是差的，那么有什么办法不反射吗，答案是有的，那就是直接\n<code class=\"language-text\">new MainFragment$$ARouter$$Autowired().inject(this);</code></p>\n<p>然而在代码没编译之前，MainFragment$$ARouter$$Autowired 这个类是还没生成的，自然无法直接调用。况且这样还有个问题，那就是每个 Activity 或 Fragment 生成的类都是唯一的，我们也不可能在每个地方手动 new+inject，这样还不如反射来的方便</p>\n<blockquote>\n<p>这时候就需要 Android 提供的工具 Transform 了</p>\n</blockquote>\n<h2>Transform 开发</h2>\n<h3>核心原理</h3>\n<blockquote>\n<p>利用 Transform，在编译期间往使用了@Autowired 的 Activity 或 Fragment 类的 onCreate(Bundle)方法自动注入<code class=\"language-text\">new xxx$$ARouter$$Autowired().inject(this);</code>这行代码</p>\n</blockquote>\n<h3>过程</h3>\n<p>1、扫描整个项目里名称后缀为$$ARouter$$Autowired 的 class 文件\n2、以此找到对应的 Activity 或 Fragment 文件\n3、利用 ASM 库对该文件进行访问\n4、访问到 onCreate(Bundle)方法时，在 super.onCreate 前写入 inject 方法</p>\n<h3>结果</h3>\n<p>编译完成后，可以通过 apk 包分析或这在 app\\build\\intermediates\\transforms 目录下找到 MainFragment 文件编译后的代码，可以看见 MainFragment 的 onCreate 方法里面多了一行代码，就是上面所想要的\n<code class=\"language-text\">new MainFragment$$ARouter$$Autowired().inject(this);</code></p>\n<h2>再次思考</h2>\n<p>虽然利用 Transform 可以解决反射的问题，但无疑也带来了一个问题，就是项目协作上，其他人不了解的话会很奇怪。我的做法是在 $$ARouter$$Autowired 类加了行注释，起码别人在看这个类的时候能知道什么时候会 inject。\n至于怎么加这行注释，就靠各位发挥了</p>\n<p>本项目例子已开源<a href=\"https://github.com/izyhang/ARouter-AutowiredTransform\">Github</a></p>","frontmatter":{"title":"ARouter @Autowired 自动注入","date":"May 31, 2020","tags":["byte","inject","arouter"],"categories":"Android"}}},"pageContext":{"slug":"/arouter-autowired-zi-dong-zhu-ru/","previous":{"fields":{"slug":"/alipay-tinyapp-zhi-ding-ye-mian-tiao-zhuan/"},"frontmatter":{"title":"支付宝小程序指定页面跳转"}},"next":{"fields":{"slug":"/android-incremental-update-diff-and-patch/"},"frontmatter":{"title":"差分包"}}}},"staticQueryHashes":["2841359383"]}