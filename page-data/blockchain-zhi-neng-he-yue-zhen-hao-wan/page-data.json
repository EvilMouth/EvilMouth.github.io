{"componentChunkName":"component---src-templates-blog-post-js","path":"/blockchain-zhi-neng-he-yue-zhen-hao-wan/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"69c829b9-cf94-5a39-960d-a72e788e4ee7","excerpt":"吐槽一下 Mist 客户端 mac 版，网络连接异常+是不是崩溃，不过智能合约开发起来真好玩\n这几天学习了智能合约开发语言 solidity，实践起来部署了一份合约并在以太坊主网验证发布，拿着开发的币在测试账号转来转去超好玩。这几天开发遇到了各种各样的小问题和智能合约开发需要注意的一些问题，总结记录一下 rinkeby…","html":"<blockquote>\n<p>吐槽一下 Mist 客户端 mac 版，网络连接异常+是不是崩溃，不过智能合约开发起来真好玩\n这几天学习了智能合约开发语言 solidity，实践起来部署了一份合约并在以太坊主网验证发布，拿着开发的币在测试账号转来转去超好玩。这几天开发遇到了各种各样的小问题和智能合约开发需要注意的一些问题，总结记录一下</p>\n</blockquote>\n<!-- More -->\n<h3>rinkeby 测试节点</h3>\n<p>在 mist 客户端可以切换节点到 rinkeby，就可以测试开发，还可以在 rinkeby 上获取点 eth 来部署合约\n<a href=\"https://www.rinkeby.io/#stats\">rinkeby</a></p>\n<h3>remix 在线开发</h3>\n<p>使用<a href=\"https://remix.ethereum.org/#optimize=false\">remix</a>在线测试部署你的合约</p>\n<h3>sol 文件</h3>\n<p>智能合约是用 solidity 语言开发，也就是 sol 后缀，我是用 vscode+sol 插件开发的</p>\n<h3>event 事件兼容</h3>\n<p>定义一个 event 事件如下</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">event</span> <span class=\"token function\">Something</span><span class=\"token punctuation\">(</span>unit256 value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>触发 event 事件需要使用 emit</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">emit</span> <span class=\"token function\">Something</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>所有者访问限制 - modifier</h3>\n<p>某些方法如果需要加上身份验证，可以使用 modifier，首先定义一个 modifier</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> ethFundDeposit<span class=\"token punctuation\">,</span> <span class=\"token string\">\"auth fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后直接在需要验证身份的方法后面加上 onlyOwner，例如</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>external 必须在最前</li>\n</ul>\n<h3>throw 弃用 - require assert revert</h3>\n<p>以前使用 throw 来抛出异常现在有三个代替语法</p>\n<ul>\n<li>require(condition, string) 一般放在方法最前面，会退回剩余 gas</li>\n<li>assert(condition) 会消耗所有 gas</li>\n<li>revert(string) 会撤销修改状态，会退回剩余 gas</li>\n</ul>\n<h3>constant view pure</h3>\n<p>constant 被拆分成 view 和 pure</p>\n<ul>\n<li>view 与 constant 效果一致，只能读状态变量不能改</li>\n<li>pure 不能改甚至不能读状态变量</li>\n</ul>\n<h3>decimals</h3>\n<p>一开始看到计算总量的时候以为看错，原来只是精度</p>\n<h3>constructor</h3>\n<p>构造函数需要使用 constructor 声明，并且是 public 修饰</p>\n<ul>\n<li>注意 constructor 不需要 function 声明，否则会有安全问题</li>\n</ul>\n<h3>No data is deployed on the contract address!</h3>\n<p>在部署合约的时候可能会遇到这种 gas 不足的问题，可以通过手动加 gas 解决，虽然会花费多一些 eth</p>","frontmatter":{"title":"智能合约真好玩","date":"December 29, 2018","tags":["ethereum","contract"],"categories":"Blockchain"}}},"pageContext":{"slug":"/blockchain-zhi-neng-he-yue-zhen-hao-wan/","previous":{"fields":{"slug":"/android-glide-cai-keng-ji/"},"frontmatter":{"title":"Android Glide踩坑记 - AppGlideModule"}},"next":{"fields":{"slug":"/blockchain-zhi-neng-he-yue-zhen-hao-wan-2/"},"frontmatter":{"title":"智能合约真好玩（二）"}}}},"staticQueryHashes":["2841359383"]}