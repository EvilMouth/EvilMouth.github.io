{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin-value-class-ji-qiao/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"3add9c97-6c5c-5390-baf4-586fe21510c6","excerpt":"inline-classes https://kotlinlang.org/docs/inline-classes.html 如何使用 思考 内联类是什么 内联类必须明确声明一个参数，目的是为了运行时内联成该参数（在上述例子中 john 实际上就等于字符串 “John…","html":"<h2>inline-classes</h2>\n<p><a href=\"https://kotlinlang.org/docs/inline-classes.html\">https://kotlinlang.org/docs/inline-classes.html</a></p>\n<h2>如何使用</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JvmInline</span>\nvalue <span class=\"token keyword\">class</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> s<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> john <span class=\"token operator\">=</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> Name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>思考</h2>\n<h3>内联类是什么</h3>\n<ol>\n<li>内联类必须明确声明一个参数，目的是为了运行时内联成该参数（在上述例子中 john 实际上就等于字符串 “John”）</li>\n</ol>\n<h3>为何要用内联类</h3>\n<ol>\n<li>首先内联类是为了解决数据类型被包装后引起更多堆内存分配而带来的性能问题（内联后将少了一层包装）。</li>\n<li>其次内联类给了通用数据类型（Int、String）更多的含义（上述例子 john 虽然在运行时为普通的字符串，但在我们看来是一个有含义的类型 Name）。</li>\n<li>内联类可以获得更好的校验体验。（上述例子 say() 将只允许传 Name 类型而不是 String 类型）</li>\n</ol>\n<h3>什么时候用内联类</h3>\n<ol>\n<li>用来代替@StringDef、@IntDef（而不是使用 Enum）</li>\n</ol>\n<p>以前 Java 可以用注解@IntDef 来定义一些常量，编译器会自动校验参数合法性</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>SOURCE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@IntDef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>NAVIGATION_MODE_STANDARD<span class=\"token punctuation\">,</span> NAVIGATION_MODE_LIST<span class=\"token punctuation\">,</span> NAVIGATION_MODE_TABS<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">NavigationMode</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NAVIGATION_MODE_STANDARD <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NAVIGATION_MODE_LIST <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NAVIGATION_MODE_TABS <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NavigationMode</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@NavigationMode</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但 Kotlin 中该校验失效，所以通常使用 Enum 来代替，这里其实可以用内联类来获取更少的内存占用</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JvmInline</span>\nvalue <span class=\"token keyword\">class</span> <span class=\"token function\">NavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> NAVIGATION_MODE_STANDARD <span class=\"token operator\">=</span> <span class=\"token function\">NavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> NAVIGATION_MODE_LIST <span class=\"token operator\">=</span> <span class=\"token function\">NavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> NAVIGATION_MODE_TABS <span class=\"token operator\">=</span> <span class=\"token function\">NavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setNavigationMode</span><span class=\"token punctuation\">(</span>mode<span class=\"token operator\">:</span> NavigationMode<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getNavigationMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NavigationMode</code></pre></div>\n<ol start=\"2\">\n<li>直接为数据类型定义特有功能（而不是使用扩展函数）</li>\n</ol>\n<p>有时我们会为一些类扩展一些函数，比如为 Long 扩展一个 formatDate 成日期的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Long<span class=\"token punctuation\">.</span><span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> SimpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>当这样做导致所有 Long 类型都有这么一个扩展函数，当扩展函数定义得越来越多时，代码提示肯定会杂乱无章。此时就可以用内联类包装起来，为其定义他特有的功能</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JvmInline</span>\nvalue <span class=\"token keyword\">class</span> <span class=\"token function\">Timestamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Long<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">formatDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> SimpleDateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>还可以为内联类定义操作符方法，获得更好的类型校验</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@JvmInline</span>\nvalue <span class=\"token keyword\">class</span> <span class=\"token function\">UInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> UInt<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">UInt</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> other<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Kotlin Value Class 技巧","date":"November 21, 2021","tags":["kotlin","value class","inline","optimise"],"categories":"Android"}}},"pageContext":{"slug":"/kotlin-value-class-ji-qiao/","previous":{"fields":{"slug":"/zi-dk-yi-glide-target-ui-xm-ds-td-textview-imagespan/"},"frontmatter":{"title":"自定义 Glide Target 实现动态 TextView ImageSpan"}},"next":null}},"staticQueryHashes":["2841359383"]}