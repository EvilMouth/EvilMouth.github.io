{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter-state/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"51cf5019-ad35-5db9-928f-65a02db68d1e","excerpt":"Flutter 状态管理介绍 State 是什么 与 Android 不同之处 在 Android，比如想要动态改变一个 TextView 的 text，则需要在通过 id 获取 TextView，并通过 TextView 提供的 setText(newText)方法设置新的 text…","html":"<p>Flutter 状态管理介绍</p>\n<h2>State 是什么</h2>\n<h3>与 Android 不同之处</h3>\n<p>在 Android，比如想要动态改变一个 TextView 的 text，则需要在通过 id 获取 TextView，并通过 TextView 提供的 setText(newText)方法设置新的 text，随后重新渲染</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TextView</span> tv <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntv<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>而在 Flutter 中，则是通过 setState()去改变</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">String text <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Text Widget引用text变量</span>\n\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  text <span class=\"token operator\">=</span> <span class=\"token string\">'newText'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在setState中改变text变量</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>setState 发生了什么</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>VoidCallback fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 省略一堆assert</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _element<span class=\"token punctuation\">.</span><span class=\"token function\">markNeedsBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前Element标记为dirty</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>setState 只是简单的标记一个 dirty（而不是 Android View 主动刷新），真正发起重新渲染的是 Flutter 的渲染机制，简单流程如下</p>\n<ul>\n<li>Flutter Engine 接收到 Vsync 垂直同步信号</li>\n<li>扫描 Element 树有没有 dirty 标记的 Element</li>\n<li>rebuild 该 element</li>\n</ul>\n<blockquote>\n<p>Element 由 Widget 生成，每一个 Widget 对应一个 Element</p>\n</blockquote>\n<p>那是否可以像下面这样写，完全可以。但这是一种规范，可以一眼看出哪些状态会被变更</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">text <span class=\"token operator\">=</span> <span class=\"token string\">'newText'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>思考</h3>\n<p>从上面的例子可以看出 Flutter 是以状态管理的方式，通过改变状态从而改变 UI，这自然引出一个刷新 UI 效率的问题，因为不像 Android 通过精准的改变一个目标 View 去刷新</p>\n<h2>Element 是什么</h2>\n<p>实际 Flutter 开发页面操作的各种 Widget，都会各自生成对应的 Element，Element 又会根据需要生成 RenderObject，所以 Flutter 会生成三棵树</p>\n<blockquote>\n<p>Widget 树 -> Element 树 -> RenderObject 树</p>\n</blockquote>\n<ul>\n<li>Widget 树就是我们代码层面生成的，Widget 只是一个配置文件</li>\n<li>Element 树则是根据 Widget 树一一对应生成的，主要功能就是管理复用</li>\n<li>RenderObject 树才是实实在在的渲染到屏幕</li>\n</ul>\n<h3>Element 的复用</h3>\n<p>众所周知在 build(context)方法返回 Widget，而 build 会在状态变化时重新被调用，也就是 Widget 会被不断的重新生成，如果渲染依赖的是 Widget，Widget 又持有 RenderObject 也就是渲染数据，那将是大量的内存浪费。</p>\n<p>所以 Widget 只是一个配置文件，存储的是一些属性，而 Element 才是真正持有 RenderObject 的对象</p>\n<p>在触发 rebuild 时，Element 的 update()会被调用，update()会调用 canUpdate()来判断是否可以复用 Widget，如果可以复用，则只是更新配置</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">static</span> bool <span class=\"token function\">canUpdate</span><span class=\"token punctuation\">(</span>Widget oldWidget<span class=\"token punctuation\">,</span> Widget newWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> oldWidget<span class=\"token punctuation\">.</span>runtimeType <span class=\"token operator\">==</span> newWidget<span class=\"token punctuation\">.</span>runtimeType\n      <span class=\"token operator\">&amp;&amp;</span> oldWidget<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> newWidget<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>如何控制刷新范围</h2>\n<p>Flutter 内部已经尽可能的优化了渲染流程，但是在实际开发中，依然要注意刷新范围，总结一个点就是</p>\n<blockquote>\n<p>setState 要写在哪里</p>\n</blockquote>\n<h3>setState 刷新的是哪块区域</h3>\n<p>再翻出 setState 的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>VoidCallback fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 省略一堆assert</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _element<span class=\"token punctuation\">.</span><span class=\"token function\">markNeedsBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前Element标记为dirty</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面已经介绍到 Flutter Engine 会 rebuild 被标记为 dirty 的 element，那在上面 setState 的代码可以看到，就是当前的 element 被标记为 dirty，也就是说</p>\n<blockquote>\n<p>在哪个 Element 调用 setState，那这个 Element 包括就会 rebuild</p>\n</blockquote>\n<h3>刷新影响</h3>\n<p>简单看官方 Counter 例子，该例子发生变化的其实只是某个 Text，但是在下面两处注释可以看到实际上整个页面都会 rebuild。</p>\n<blockquote>\n<p>当页面比较复杂或者像 FutureBuilder 这种类型 Widget 时，就要尽可能控制 setState 位置</p>\n</blockquote>\n<blockquote>\n<p>不过通过该例子并不是说这样写是错误的，还记得 Element 的复用逻辑吗，虽然该例子整个 Scaffold 以及子 Widget 都会重新创建，但是实际变化的 Element 只是其中引用了_counter 的 Text 而已</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHomePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyHomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>Key key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> String title<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  _MyHomePageState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_MyHomePageState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_MyHomePageState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>MyHomePage<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  int _counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_incrementCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 调用setState的Element是MyHomePage的Element</span>\n      _counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 所以该build方法在每次increment都会调用一次</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      appBar<span class=\"token punctuation\">:</span> <span class=\"token function\">AppBar</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n          mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'You have pushed the button this many times:'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'$_counter'</span><span class=\"token punctuation\">,</span>\n              style<span class=\"token punctuation\">:</span> Theme<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textTheme<span class=\"token punctuation\">.</span>headline4<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      floatingActionButton<span class=\"token punctuation\">:</span> <span class=\"token function\">FloatingActionButton</span><span class=\"token punctuation\">(</span>\n        onPressed<span class=\"token punctuation\">:</span> _incrementCounter<span class=\"token punctuation\">,</span>\n        tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Increment'</span><span class=\"token punctuation\">,</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>如何控制</h3>\n<h4>方式一</h4>\n<p>首先 Flutter 是组合 Widget 的编写方式，StatelessWidget 嵌套 StatefulWidget 再嵌套 StatelessWidget，需要状态改变的地方可以重新封装成一个 StatefulWidget 从而缩小 setState 影响范围</p>\n<blockquote>\n<p>下面例子通过将 Text 和 Button 封装到 IncrementWidget 中，此时调用 setState 的 Element 只是 IncrementWidget 的 Element，所以控制了刷新范围</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">IncrementWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  _MyHomePageState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">_MyHomePageState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_IncrementState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>IncrementWidget<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  int _counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_incrementCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      _counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n      mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'You have pushed the button this many times:'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n          <span class=\"token string\">'$_counter'</span><span class=\"token punctuation\">,</span>\n          style<span class=\"token punctuation\">:</span> Theme<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textTheme<span class=\"token punctuation\">.</span>headline4<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">RaisedButton</span><span class=\"token punctuation\">(</span>\n          onPressed<span class=\"token punctuation\">:</span> _incrementCounter<span class=\"token punctuation\">,</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>方式二</h4>\n<p>方式一的例子只是简单的维护一个 int 类型的状态，当遇到状态更为复杂的情况，比如该状态不仅仅一个地方引用到，在别的地方也需要控制，那自然无法只是封装一个 Widget 就能搞定的。再拿官方 Counter 作为例子</p>\n<blockquote>\n<p>下面的例子的做法并不推荐，中心思想依然是想表达如何缩小 setState 范围</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHomePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">MyHomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>Key key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> String title<span class=\"token punctuation\">;</span>\n  int _counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  StateSetter _setState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取Text的setState</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      appBar<span class=\"token punctuation\">:</span> <span class=\"token function\">AppBar</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n          mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'You have pushed the button this many times:'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">StatefulBuilder</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              _setState <span class=\"token operator\">=</span> setState<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'$_counter'</span><span class=\"token punctuation\">,</span>\n                style<span class=\"token punctuation\">:</span> Theme<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textTheme<span class=\"token punctuation\">.</span>headline4<span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      floatingActionButton<span class=\"token punctuation\">:</span> <span class=\"token function\">FloatingActionButton</span><span class=\"token punctuation\">(</span>\n        onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">_setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用的是Text的setState</span>\n            _counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Increment'</span><span class=\"token punctuation\">,</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Provider 框架</h2>\n<p>当业务逻辑越来越复杂，状态管理自然成为至关重要的一个门槛，社区也开源了许多状态管理的框架，例如 Bloc、Redux</p>\n<p>这里主要介绍官方 Provider 使用以及注意事项</p>\n<h3>Provider 使用</h3>\n<p>首先引入 Provider 库</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> ^4.3.1</code></pre></div>\n<p>官方的 Counter 例子可以这样写，几个重要点</p>\n<ul>\n<li>ChangeNotifier#notifyListeners()</li>\n<li>ChangeNotifierProvider#create()</li>\n<li>context.watch<Counter>()</li>\n<li>context.read<Counter>()</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">with</span> ChangeNotifier <span class=\"token punctuation\">{</span>\n  int _count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  int <span class=\"token keyword\">get</span> count <span class=\"token operator\">=</span><span class=\"token operator\">></span> _count<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">notifyListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通知监听者</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">const</span> <span class=\"token function\">MaterialApp</span><span class=\"token punctuation\">(</span>\n      home<span class=\"token punctuation\">:</span> <span class=\"token function\">ChangeNotifierProvider</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 通过Provider包裹child</span>\n        create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 创建Counter，可以理解为ViewModel</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">MyHomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyHomePage</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function\">MyHomePage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>Key key<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Scaffold</span><span class=\"token punctuation\">(</span>\n      appBar<span class=\"token punctuation\">:</span> <span class=\"token function\">AppBar</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token function\">Center</span><span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span>\n          mainAxisSize<span class=\"token punctuation\">:</span> MainAxisSize<span class=\"token punctuation\">.</span>min<span class=\"token punctuation\">,</span>\n          mainAxisAlignment<span class=\"token punctuation\">:</span> MainAxisAlignment<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">,</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You have pushed the button this many times:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'${context.watch&lt;Counter>().count}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通过watch监听count变化</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      floatingActionButton<span class=\"token punctuation\">:</span> <span class=\"token function\">FloatingActionButton</span><span class=\"token punctuation\">(</span>\n        onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> context<span class=\"token punctuation\">.</span>read<span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 通过read获取Counter对象调用increment方法</span>\n        tooltip<span class=\"token punctuation\">:</span> <span class=\"token string\">'Increment'</span><span class=\"token punctuation\">,</span>\n        child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">const</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>Icons<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>context.watch 和 context.read 是通过 dart 的 Extension 语法扩展</p>\n<p>watch 会开启监听，当发生变化时，context（也就是 Element）就会 rebuild</p>\n<p>还有个 context.select&#x3C;T, R>()允许监听部分数据</p>\n</blockquote>\n<h3>Consumer</h3>\n<p>上面的例子同样会看到一个问题，就是 watch 调用的 context 是整个 MyHomePage，所以当 count 变化时整个 MyHomePage 会 rebuild，依然浪费了不必要的 Widget 创建，所以 Provider 提供了 Consumer</p>\n<p>下面例子通过 Consumer 包裹 Text，其实也就是封装了一个通用的 Widget，为的就是缩小刷新范围</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You have pushed the button this many times:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Consumer<span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'${counter.count}'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3>Selector</h3>\n<p>页面再复杂一点，看这么一个例子。</p>\n<p>一个评论列表，每个评论都有个点赞按钮，这里就有个注意点 - <em>局部刷新</em>。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token punctuation\">{</span>\n  String content<span class=\"token punctuation\">;</span>\n  bool like<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否点赞</span>\n\n  <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>like<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentListProvider</span> <span class=\"token keyword\">with</span> ChangeNotifier <span class=\"token punctuation\">{</span>\n  List<span class=\"token operator\">&lt;</span>Comment<span class=\"token operator\">></span> _commentList <span class=\"token operator\">=</span>\n      List<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Comment $index'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">get</span> commentList <span class=\"token operator\">=</span><span class=\"token operator\">></span> _commentList<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">get</span> total <span class=\"token operator\">=</span><span class=\"token operator\">></span> _commentList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">like</span><span class=\"token punctuation\">(</span>int index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> comment <span class=\"token operator\">=</span> _commentList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    _commentList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Comment</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>comment<span class=\"token punctuation\">.</span>like<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">notifyListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ChangeNotifierProvider</span><span class=\"token punctuation\">(</span>\n  create<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">CommentListProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  child<span class=\"token punctuation\">:</span> Selector<span class=\"token operator\">&lt;</span>CommentListProvidCommentListProvider<span class=\"token operator\">></span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 1.Selector包住ListView而不是用Consumer</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> provider<span class=\"token punctuation\">,</span>\n    builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> ListView<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>\n        physics<span class=\"token punctuation\">:</span> <span class=\"token function\">NeverScrollableScrollPhysics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        itemCount<span class=\"token punctuation\">:</span> provider<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">,</span>\n        itemBuilder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> Selector<span class=\"token operator\">&lt;</span>CommentListProvidComment<span class=\"token operator\">></span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// Selector包住每个Item</span>\n            selector<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n                provider<span class=\"token punctuation\">.</span>commentList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2.selector返回单个Comment</span>\n            builder<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token function\">ListTile</span><span class=\"token punctuation\">(</span>\n                title<span class=\"token punctuation\">:</span> <span class=\"token function\">Text</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                trailing<span class=\"token punctuation\">:</span> <span class=\"token function\">IconButton</span><span class=\"token punctuation\">(</span>\n                  color<span class=\"token punctuation\">:</span> Colors<span class=\"token punctuation\">.</span>accents<span class=\"token punctuation\">[</span>\n                      <span class=\"token function\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>Colaccents<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                  icon<span class=\"token punctuation\">:</span> <span class=\"token function\">Icon</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">.</span>like\n                      <span class=\"token operator\">?</span> Icons<span class=\"token punctuation\">.</span>star\n                      <span class=\"token punctuation\">:</span> Icons<span class=\"token punctuation\">.</span>star_border<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                  onPressed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    provider<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 点赞</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>重点讲解</p>\n<ol>\n<li>Selector 与 Consumer 唯一区别是 Selector Widget 会缓存当前 Widget，并在 rebuild 的时候判断差异才去更新</li>\n<li>第二个 Selector 包住每个 Item，当状态变化时，Selector 只会识别到当前的评论数据发生了变化，所以就只会刷新该 Item</li>\n</ol>\n<p>看下 Selector 的 build 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">T value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存数据，该例子指的是Comment</span>\nWidget cache<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存Widget</span>\nWidget oldWidget<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存Selector Widget</span>\n\n<span class=\"token metadata symbol\">@override</span>\nWidget <span class=\"token function\">buildWithChild</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">,</span> Widget child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> selected <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span><span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> shouldInvalidateCache <span class=\"token operator\">=</span> oldWidget <span class=\"token operator\">!=</span> widget <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>_shouldRebuild <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n          widget<span class=\"token punctuation\">.</span>_shouldRebuild<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> selected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span>_shouldRebuild <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token operator\">!</span><span class=\"token keyword\">const</span> <span class=\"token function\">DeepCollectionEquality</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> selected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DeepCollectionEquality判断新旧数据的不同，也可定义shouldRebuild覆盖该默认判断逻辑</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shouldInvalidateCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> selected<span class=\"token punctuation\">;</span>\n    oldWidget <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">;</span>\n    cache <span class=\"token operator\">=</span> widget<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// 这里就是构建了ListTile</span>\n      context<span class=\"token punctuation\">,</span>\n      selected<span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Consumer 与 Selector 区别</h3>\n<blockquote>\n<p>Consumer - 字面意思消费者，故只要状态变更，就会 rebuild\n而 Selector 内部存在缓存，视具体情况 rebuild</p>\n</blockquote>\n<h3>更多 Provider</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/Provider-class.html\">Provider</a></td>\n<td>The most basic form of provider. It takes a value and exposes it, whatever the value is.</td>\n</tr>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/ListenableProvider-class.html\">ListenableProvider</a></td>\n<td>A specific provider for Listenable object. ListenableProvider will listen to the object and ask widgets which depend on it to rebuild whenever the listener is called.</td>\n</tr>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/ChangeNotifierProvider-class.html\">ChangeNotifierProvider</a></td>\n<td>A specification of ListenableProvider for ChangeNotifier. It will automatically call <code class=\"language-text\">ChangeNotifier.dispose</code> when needed.</td>\n</tr>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/ValueListenableProvider-class.html\">ValueListenableProvider</a></td>\n<td>Listen to a ValueListenable and only expose <code class=\"language-text\">ValueListenable.value</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/StreamProvider-class.html\">StreamProvider</a></td>\n<td>Listen to a Stream and expose the latest value emitted.</td>\n</tr>\n<tr>\n<td><a href=\"https://pub.dartlang.org/documentation/provider/latest/provider/FutureProvider-class.html\">FutureProvider</a></td>\n<td>Takes a <code class=\"language-text\">Future</code> and updates dependents when the future completes.</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Flutter State","date":"August 14, 2020","tags":["flutter","state","source"],"categories":"Flutter"}}},"pageContext":{"slug":"/flutter-state/","previous":{"fields":{"slug":"/flutter-fun-widget/"},"frontmatter":{"title":"Fun Flutter Widget"}},"next":{"fields":{"slug":"/flutter-run-app/"},"frontmatter":{"title":"Flutter runApp"}}}},"staticQueryHashes":["2841359383"]}