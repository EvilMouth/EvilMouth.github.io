{"componentChunkName":"component---src-templates-blog-post-js","path":"/escape-rxjava-observable-zip/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"12b8d0e2-a5f0-5561-a272-e7ae9d5652f4","excerpt":"开发中难免遇到单页面多任务的情景，比如详情页的信息可能需要从多个接口获取，虽然以用户体验来看多个接口返回数据互不影响，哪个接口先返回数据就先显示，但在某些特殊情景下，需要多个接口都成功返回数据再统一更新 UI…","html":"<p>开发中难免遇到单页面多任务的情景，比如详情页的信息可能需要从多个接口获取，虽然以用户体验来看多个接口返回数据互不影响，哪个接口先返回数据就先显示，但在某些特殊情景下，需要多个接口都成功返回数据再统一更新 UI</p>\n<p>这时就存在一个问题，网络请求都是异步的，怎样才能知道所有接口都请求成功了呢？实现方法有很多种，但要把代码写得优雅一点就不是那么容易了</p>\n<p>rxjava 有个<code class=\"language-text\">zip</code>操作符可以组合多个<code class=\"language-text\">Observable</code>发射数据再统一发射出来，所以能达到此类场景的要求</p>\n<!-- More -->\n<h2>zip 介绍</h2>\n<p>这里模拟两个网络请求</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> o1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> o2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此时使用<code class=\"language-text\">zip</code>操作符将两个<code class=\"language-text\">Observable</code>组合到一起</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Disposable</span> disposable <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">zip</code>操作符的作用其实就是把多个<code class=\"language-text\">Observable</code>组合成新的<code class=\"language-text\">Observable</code>，这个新的<code class=\"language-text\">Observable</code>还需要自己定义类型，所以实际开发中还需要为两个网络请求的返回数据类型包多一层</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wrap</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Wrap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Disposable</span> disposable <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrap</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Wrap</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wrap</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Wrap</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrap</span> w<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>看到<code class=\"language-text\">zip</code>源码，其中最后一个参数<code class=\"language-text\">zipper</code>就是将两个<code class=\"language-text\">Observable</code>组合起来的关键</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>T1<span class=\"token punctuation\">,</span> T2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">ObservableSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> T1<span class=\"token punctuation\">></span></span> source1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> T2<span class=\"token punctuation\">></span></span> source2<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T1<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> T2<span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> zipper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ObjectHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>source1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"source1 is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ObjectHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>source2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"source2 is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">zipArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Functions</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFunction</span><span class=\"token punctuation\">(</span>zipper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> source1<span class=\"token punctuation\">,</span> source2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>正文 - 移除 zipper</h2>\n<p>前面说了这么多，就是为了引出<code class=\"language-text\">zipper</code>。当上例提到的特殊情景越来越多的情况下，每次使用<code class=\"language-text\">zip</code>组合多个请求，就需要一个<code class=\"language-text\">Wrap</code>去包装多个返回数据，极其烦人，所以才有了此文，想方设法拜托这个烦人的<code class=\"language-text\">zipper</code></p>\n<p><code class=\"language-text\">zipper</code>所需的新的数据类型<code class=\"language-text\">Wrap</code>的作用看来只是包装方便<code class=\"language-text\">Observable</code>返回，实际上最终订阅也只是为了拿到各个请求的数据，所以<code class=\"language-text\">Wrap</code>实体类的存在并没有多大意义</p>\n<h3>java 层面</h3>\n<p><code class=\"language-text\">java</code>层面想要移除<code class=\"language-text\">zipper</code>可以通过一个中间层来帮助管理<code class=\"language-text\">Observable</code>，可以参考<a href=\"https://github.com/izyhang/DamonTask\">https://github.com/izyhang/DamonTask</a></p>\n<p>原理在于通过一个中间层管理类<code class=\"language-text\">TaskManager</code>来管理请求，一个<code class=\"language-text\">Task</code>对应一个<code class=\"language-text\">Observable</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">TaskManager</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer3</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s3<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// print s</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>kotlin 层面</h3>\n<p><code class=\"language-text\">kotlin</code>由于其语法特性，可以直接扩展<code class=\"language-text\">Observable</code>函数方法，所以实现起来更加流畅\n<a href=\"https://github.com/izyhang/RxCollection\">https://github.com/izyhang/RxCollection</a></p>\n<p>通过针对<code class=\"language-text\">Observable</code>扩展函数<code class=\"language-text\">subscribeUnpack</code>实现脱离<code class=\"language-text\">zipper</code></p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">ObservableCollection<span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>\n            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">4F</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeUnpack</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> fl <span class=\"token operator\">-></span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fl<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\nObservable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"1\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">zipWith</span><span class=\"token punctuation\">(</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">2F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeUnpack</span> <span class=\"token punctuation\">{</span> s<span class=\"token punctuation\">,</span> fl <span class=\"token operator\">-></span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n                <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fl<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"摆脱Observable.zip烦人的zipper参数","date":"May 28, 2018","tags":["rxJava"],"categories":"Android"}}},"pageContext":{"id":"12b8d0e2-a5f0-5561-a272-e7ae9d5652f4","previousPostId":"62076a9d-8076-59d2-b4b7-6e4f3e914c25","nextPostId":"7ddc750e-321a-5bae-a531-4d2bfe298922"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}