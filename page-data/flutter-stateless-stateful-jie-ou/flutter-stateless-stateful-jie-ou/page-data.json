{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter-stateless-stateful-jie-ou/flutter-stateless-stateful-jie-ou/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth's Blog"}},"markdownRemark":{"id":"6ff071e6-b9ca-57b8-b1cb-01ce7da06a27","excerpt":"和是的基础组件，日常开发中自定义都是选择继承这两者之一。 两者的区别在于，面向那些始终不变的UI控件，比如标题栏中的标题；而则是面向可能会改变UI状态的控件，比如有点击反馈的按钮。 就没什么好研究的了，的创建需要指定一个，在需要更新UI的时候调用，并在中改变一些变量数值等，组件会重新以达到刷新状态也就是刷新UI…","html":"<p><code class=\"language-text\">StatelessWidget</code>和<code class=\"language-text\">StatefulWidget</code>是<code class=\"language-text\">flutter</code>的基础组件，日常开发中自定义<code class=\"language-text\">Widget</code>都是选择继承这两者之一。</p>\n<p>两者的区别在于<code class=\"language-text\">状态的改变</code>，<code class=\"language-text\">StatelessWidget</code>面向那些始终不变的UI控件，比如标题栏中的标题；而<code class=\"language-text\">StatefulWidget</code>则是面向可能会改变UI状态的控件，比如有点击反馈的按钮。</p>\n<p><code class=\"language-text\">StatelessWidget</code>就没什么好研究的了，<code class=\"language-text\">StatefulWidget</code>的创建需要指定一个<code class=\"language-text\">State</code>，在需要更新UI的时候调用<code class=\"language-text\">setState(VoidCallback fn)</code>，并在<code class=\"language-text\">VoidCallback</code>中改变一些变量数值等，组件会重新<code class=\"language-text\">build</code>以达到刷新状态也就是刷新UI的效果。</p>\n<p>官方有个<code class=\"language-text\">StatefulWidget</code>的例子，通过点击按钮使屏幕上的<code class=\"language-text\">Text</code>数值逐渐增长，可以很好理解<code class=\"language-text\">StatefulWidget</code>的使用</p>\n<!-- More -->\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This class is the configuration for the state. It holds the</span>\n  <span class=\"token comment\">// values (in this nothing) provided by the parent and used by the build</span>\n  <span class=\"token comment\">// method of the State. Fields in a Widget subclass are always marked \"final\".</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  _CounterState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_CounterState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_CounterState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  int _counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// This call to setState tells the Flutter framework that</span>\n      <span class=\"token comment\">// something has changed in this State, which causes it to rerun</span>\n      <span class=\"token comment\">// the build method below so that the display can reflect the</span>\n      <span class=\"token comment\">// updated values. If we changed _counter without calling</span>\n      <span class=\"token comment\">// setState(), then the build method would not be called again,</span>\n      <span class=\"token comment\">// and so nothing would appear to happen.</span>\n      _counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This method is rerun every time setState is called, for instance</span>\n    <span class=\"token comment\">// as done by the _increment method above.</span>\n    <span class=\"token comment\">// The Flutter framework has been optimized to make rerunning</span>\n    <span class=\"token comment\">// build methods fast, so that you can just rebuild anything that</span>\n    <span class=\"token comment\">// needs updating rather than having to individually change</span>\n    <span class=\"token comment\">// instances of widgets.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Row</span><span class=\"token punctuation\">(</span>\n      children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">RaisedButton</span><span class=\"token punctuation\">(</span>\n          onPressed<span class=\"token punctuation\">:</span> _increment<span class=\"token punctuation\">,</span>\n          child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Count: $_counter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>解耦</h2>\n<p>上面的例子比较简单，当层级多、状态多的情况下，这样的代码会导致阅读性、扩展性较低的不友好情况发生。代码整洁、代码解耦在日常开发中都非常重要，官方也是非常注重这一点，也提供了思路，将按钮和文本控件从<code class=\"language-text\">Counter</code>分离，<code class=\"language-text\">Counter</code>负责更新状态，按钮和文本控件只负责显示，这样达到了解耦，保持代码整洁，扩展性也对应提高。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">CounterDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> int count<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Count: $count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterIncrementor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatelessWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">CounterIncrementor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onPressed<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> VoidCallback onPressed<span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RaisedButton</span><span class=\"token punctuation\">(</span>\n      onPressed<span class=\"token punctuation\">:</span> onPressed<span class=\"token punctuation\">,</span>\n      child<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">StatefulWidget</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  _CounterState <span class=\"token function\">createState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">_CounterState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_CounterState</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  int _counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">_increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">++</span>_counter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  Widget <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Row</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>Widget<span class=\"token operator\">></span><span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CounterIncrementor</span><span class=\"token punctuation\">(</span>onPressed<span class=\"token punctuation\">:</span> _increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CounterDisplay</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">:</span> _counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>思考</h2>\n<p>好的编程思想对日常开发有非常大的帮助，官方只是提供一个很小的例子，仔细琢磨理清思路方能提高工作效率。</p>","frontmatter":{"title":"flutter-StatelessWidget与StatefulWidget的解耦","date":"June 13, 2018","description":null}}},"pageContext":{"slug":"/flutter-stateless-stateful-jie-ou/flutter-stateless-stateful-jie-ou/","previous":{"fields":{"slug":"/amazon-s3-post-upload-policy/"},"frontmatter":{"title":"亚马逊S3`POST`上传策略"}},"next":{"fields":{"slug":"/coordinatorlayout-recyclerview-jia-zai-geng-duo-shi-zi-dong-hua-dong-de-wen-ti/"},"frontmatter":{"title":"CoordinatorLayout+RecyclerView加载更多时自动滑动的问题"}}}},"staticQueryHashes":["2841359383"]}