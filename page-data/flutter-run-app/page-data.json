{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter-run-app/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"949a81d1-29b5-5956-9de2-8d16dc879277","excerpt":"runApp 过程介绍以及 Binding 的作用，需要先了解 mixin 概念 runApp runApp作为Flutter启动App入口，具体做了哪些操作，通过源码一步步分析 ensureInitialized 负责创建一个 WidgetsBinding 的全局单例 scheduleAttachRootWidget…","html":"<p>runApp 过程介绍以及 Binding 的作用，需要先了解 mixin 概念</p>\n<h2>runApp</h2>\n<p>runApp作为Flutter启动App入口，具体做了哪些操作，通过源码一步步分析</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">runApp</span><span class=\"token punctuation\">(</span>Widget app<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  WidgetsFlutterBinding<span class=\"token punctuation\">.</span><span class=\"token function\">ensureInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAttachRootWidget</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleWarmUpFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ensureInitialized 负责创建一个 WidgetsBinding 的全局单例</li>\n<li>scheduleAttachRootWidget 负责将 app（也就是我们创建的首个 Widget）附加到 RenderView（Flutter 渲染树的根） 上</li>\n<li>scheduleWarmUpFrame 则是立即请求一次绘制，将渲染树渲染出来</li>\n</ul>\n<h3>ensureInitialized - WidgetsFlutterBinding 起到什么作用</h3>\n<p>先看下 WidgetsFlutterBinding 类的定义</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// A concrete binding for applications based on the Widgets framework.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This is the glue that binds the framework to the Flutter engine.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WidgetsFlutterBinding</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BindingBase</span> <span class=\"token keyword\">with</span> GestureBinding<span class=\"token punctuation\">,</span> SchedulerBinding<span class=\"token punctuation\">,</span> ServicesBinding<span class=\"token punctuation\">,</span> PaintingBinding<span class=\"token punctuation\">,</span> SemanticsBinding<span class=\"token punctuation\">,</span> RendererBinding<span class=\"token punctuation\">,</span> WidgetsBinding <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">/// Returns an instance of the [WidgetsBinding], creating and</span>\n  <span class=\"token comment\">/// initializing it if necessary. If one is created, it will be a</span>\n  <span class=\"token comment\">/// [WidgetsFlutterBinding]. If one was previously initialized, then</span>\n  <span class=\"token comment\">/// it will at least implement [WidgetsBinding].</span>\n  <span class=\"token keyword\">static</span> WidgetsBinding <span class=\"token function\">ensureInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>WidgetsBinding<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">WidgetsFlutterBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> WidgetsBinding<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>WidgetsFlutterBinding 实际上只是一个粘合剂，通过继承 BindingBase 以及使用 <em>混入</em> 将一系列 Binding 结合起来。</p>\n</blockquote>\n<p>所以具体作用还得往下看。直接看 BindingBase 的构造函数</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// Default abstract constructor for bindings.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// First calls [initInstances] to have bindings initialize their</span>\n<span class=\"token comment\">/// instance pointers and other state, then calls</span>\n<span class=\"token comment\">/// [initServiceExtensions] to have bindings initialize their</span>\n<span class=\"token comment\">/// observatory service extensions, if any.</span>\n<span class=\"token function\">BindingBase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">initServiceExtensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>initInstances 是一个空实现，具体作用是让 <em>混入</em> 的一系列 Binding 进行自己的初始化，后续会介绍各自的作用</li>\n<li>initServiceExtensions 允许子类注册一些服务扩展监听</li>\n</ul>\n<p>接下来就一个个 Binding 看下都是干什么的</p>\n<h4>GestureBinding 手势相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">mixin</span> GestureBinding <span class=\"token keyword\">on</span> BindingBase <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HitTestable</span><span class=\"token punctuation\">,</span> HitTestDispatcher<span class=\"token punctuation\">,</span> HitTestTarget <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>onPointerDataPacket <span class=\"token operator\">=</span> _handlePointerDataPacket<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>mixin 将 GestureBinding 声明为混入类，允许其他类通过 with 将其混入并获得其能力。on 类似继承，并表明如果有类想混入 GestureBinding，该类必须先继承 BindingBase。后续的 Binding 类都是如此实现</p>\n</blockquote>\n<blockquote>\n<p>window 在 Flutter 是一个全局单例，是整个框架的根基，所有跟屏幕相关的事件（绘制、分发）都由其控制</p>\n</blockquote>\n<p>GestureBinding 的初始化实现了 onPointerDataPacket 回调，负责处理窗口手势事件。并实现了 HitTest 相关的接口，目的就是为了进行命中测试查找到点击屏幕的位置对应的 Widget 然后分发事件</p>\n<h4>SchedulerBinding Frame调度相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ensureFrameCallbacksRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span>onBeginFrame <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> _handleBeginFrame<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span>onDrawFrame <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> _handleDrawFrame<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SchedulerBinding 主要负责每一帧的调度，Ticker 和 Animation 就是由他所控制。</p>\n<p>SchedulerBinding 实现了 onBeginFrame 和 onDrawFrame 回调，并处理屏幕刷新事件。handleBeginFrame 和 handleDrawFrame 就是负责执行每一帧需要处理的事务，这些事务可以通过 SchedulerBinding.instance 进行注册，其中共有三种类型的事务</p>\n<ul>\n<li>transientCallbacks 用于处理一些临时的绘制，例如动画</li>\n<li>persistentCallbacks 负责布局绘制工作</li>\n<li>postFrameCallbacks 处理一次性绘制</li>\n</ul>\n<p>再回顾 runApp 的代码，其中最后一步 scheduleWarmUpFrame() 正是 SchedulerBinding 的方法实现，具体在下面篇章介绍</p>\n<h4>ServicesBinding 通信相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">mixin</span> ServicesBinding <span class=\"token keyword\">on</span> BindingBase<span class=\"token punctuation\">,</span> SchedulerBinding <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    _defaultBinaryMessenger <span class=\"token operator\">=</span> <span class=\"token function\">createBinaryMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>onPlatformMessage <span class=\"token operator\">=</span> defaultBinaryMessenger<span class=\"token punctuation\">.</span>handlePlatformMessage<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initLicenses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SystemChannels<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">.</span><span class=\"token function\">setMessageHandler</span><span class=\"token punctuation\">(</span>handleSystemMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SystemChannels<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">setMessageHandler</span><span class=\"token punctuation\">(</span>_handleLifecycleMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">readInitialLifecycleStateFromNativeWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ServicesBinding 负责与 Native 进行通信，在初始化时分别做一下操作</p>\n<ul>\n<li>createBinaryMessenger() 创建通信信使</li>\n<li>实现 onPlatformMessage 回调，用以处理平台消息</li>\n<li>initLicenses() 添加一些许可，会自动整合然后通过 LicensePage 展示，一般不会用到</li>\n<li>SystemChannels.system 监听平台内存紧张回调，用于清理图片缓存、Widget一些自定义处理</li>\n<li>SystemChannels.lifecycle 接收平台页面生命周期事件，只有处于前台才会调度绘制</li>\n<li>readInitialLifecycleStateFromNativeWindow() 读取平台当前生命状态进行绘制的调度</li>\n</ul>\n<h4>PaintingBinding 字体变动、图片缓存相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">mixin</span> PaintingBinding <span class=\"token keyword\">on</span> BindingBase<span class=\"token punctuation\">,</span> ServicesBinding <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    _imageCache <span class=\"token operator\">=</span> <span class=\"token function\">createImageCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaderWarmUp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      shaderWarmUp<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>PaintingBinding 的初始化中通过 createImageCache() 创建了一个全局图片缓存单例，Image Widget 便是将图片缓存在这里。</p>\n<blockquote>\n<p>shaderWarmUp 为 Skia着色器 热身，热身就是为了防止可能出现的卡顿</p>\n</blockquote>\n<p>PaintingBinding 还实现了 ServicesBinding 的 handleSystemMessage(Object systemMessage) 来监听平台的 fontsChange 事件，可以通过 PaintingBinding.instance.systemFonts.addListener 来进行监听</p>\n<h4>SemanticsBinding 辅助功能相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">mixin</span> SemanticsBinding <span class=\"token keyword\">on</span> BindingBase <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    _accessibilityFeatures <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>accessibilityFeatures<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>SemanticsBinding 主要作用与一些无障碍服务上，比如图片色盲、文字朗读，在国内不受重视</p>\n<h4>RendererBinding 渲染相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// The glue between the render tree and the Flutter engine.</span>\n<span class=\"token keyword\">mixin</span> RendererBinding <span class=\"token keyword\">on</span> BindingBase<span class=\"token punctuation\">,</span> ServicesBinding<span class=\"token punctuation\">,</span> SchedulerBinding<span class=\"token punctuation\">,</span> GestureBinding<span class=\"token punctuation\">,</span> SemanticsBinding<span class=\"token punctuation\">,</span> HitTestable <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    _pipelineOwner <span class=\"token operator\">=</span> <span class=\"token function\">PipelineOwner</span><span class=\"token punctuation\">(</span>\n      onNeedVisualUpdate<span class=\"token punctuation\">:</span> ensureVisualUpdate<span class=\"token punctuation\">,</span>\n      onSemanticsOwnerCreated<span class=\"token punctuation\">:</span> _handleSemanticsOwnerCreated<span class=\"token punctuation\">,</span>\n      onSemanticsOwnerDisposed<span class=\"token punctuation\">:</span> _handleSemanticsOwnerDisposed<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>onMetricsChanged <span class=\"token operator\">=</span> handleMetricsChanged\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>onTextScaleFactorChanged <span class=\"token operator\">=</span> handleTextScaleFactorChanged\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>onPlatformBrightnessChanged <span class=\"token operator\">=</span> handlePlatformBrightnessChanged\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>onSemanticsEnabledChanged <span class=\"token operator\">=</span> _handleSemanticsEnabledChanged\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>onSemanticsAction <span class=\"token operator\">=</span> _handleSemanticsAction<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initRenderView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_handleSemanticsEnabledChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>renderView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addPersistentFrameCallback</span><span class=\"token punctuation\">(</span>_handlePersistentFrameCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initMouseTracker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>RendererBinding 官方定义为渲染树与 Flutter engine 的粘合剂，负责渲染树的一切行为</p>\n</blockquote>\n<p>通过 RendererBinding 的初始化可以看到做了这些操作</p>\n<ul>\n<li>PipelineOwner 的创建，PipelineOwner 负责渲染一系列流程的工作，setState 后的 dirty 状态就是由他维护</li>\n<li>实现了 onMetricsChanged 回调，处理缩放比例改变并通过 SchedulerBinding 调度渲染</li>\n<li>实现了 onTextScaleFactorChanged 回调，处理文字缩放改变，通过 WidgetsBinding.instance.addObserver 添加监听</li>\n<li>实现了 onPlatformBrightnessChanged 回调，处理亮度改变，一样是通过 WidgetsBinding 去添加监听</li>\n<li>实现了 semantic 相关回调，处理辅助服务相关内容</li>\n<li>initRenderView() 创建渲染树的根元素</li>\n<li>addPersistentFrameCallback(_handlePersistentFrameCallback) 向 SchedulerBinding 的 _persistentCallbacks 注册一个回调，该回调负责的就是渲染流程的动画、计算、布局、绘制的工作</li>\n<li>initMouseTracker() 创建焦点追踪器，在例如 Tooltip Widget、高亮中就使用到</li>\n</ul>\n<h4>WidgetsBinding Widget相关</h4>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// The glue between the widgets layer and the Flutter engine.</span>\n<span class=\"token keyword\">mixin</span> WidgetsBinding <span class=\"token keyword\">on</span> BindingBase<span class=\"token punctuation\">,</span> ServicesBinding<span class=\"token punctuation\">,</span> SchedulerBinding<span class=\"token punctuation\">,</span> GestureBinding<span class=\"token punctuation\">,</span> RendererBinding<span class=\"token punctuation\">,</span> SemanticsBinding <span class=\"token punctuation\">{</span>\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">initInstances</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">_debugAddStackFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Initialization of [_buildOwner] has to be done after</span>\n    <span class=\"token comment\">// [super.initInstances] is called, as it requires [ServicesBinding] to</span>\n    <span class=\"token comment\">// properly setup the [defaultBinaryMessenger] instance.</span>\n    _buildOwner <span class=\"token operator\">=</span> <span class=\"token function\">BuildOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    buildOwner<span class=\"token punctuation\">.</span>onBuildScheduled <span class=\"token operator\">=</span> _handleBuildScheduled<span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>onLocaleChanged <span class=\"token operator\">=</span> handleLocaleChanged<span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span>onAccessibilityFeaturesChanged <span class=\"token operator\">=</span> handleAccessibilityFeaturesChanged<span class=\"token punctuation\">;</span>\n    SystemChannels<span class=\"token punctuation\">.</span>navigation<span class=\"token punctuation\">.</span><span class=\"token function\">setMethodCallHandler</span><span class=\"token punctuation\">(</span>_handleNavigationInvocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FlutterErrorDetails<span class=\"token punctuation\">.</span>propertiesTransformers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>transformDebugCreator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>WidgetsBinding 是所有 Binding 中最重要的一环，<strong>Flutter 万物皆 Widget</strong>，WidgetsBinding 负责</p>\n</blockquote>\n<p>WidgetsBinding 初始化主要做了以下操作</p>\n<ul>\n<li>创建 BuildOwner，负责管控那些需要<strong>rebuild</strong>的 widget（也就是标记为 dirty 的 element）</li>\n<li>handleBuildScheduled 会在 widget rebuild 时调用，并发起绘制调度</li>\n<li>实现 onLocaleChanged 回调，处理语言变化</li>\n<li>handleNavigationInvocation 处理路由的入栈和出栈</li>\n</ul>\n<h3>scheduleAttachRootWidget - RenderView 是什么</h3>\n<p>大致了解各个 Binding 的主要作用后，会了解到其中最重要的一环 WidgetsBinding 以及渲染树的根 RenderView，下面就从 runApp 的第二步调用介绍起</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// Schedules a [Timer] for attaching the root widget.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This is called by [runApp] to configure the widget tree. Consider using</span>\n<span class=\"token comment\">/// [attachRootWidget] if you want to build the widget tree synchronously.</span>\n<span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">scheduleAttachRootWidget</span><span class=\"token punctuation\">(</span>Widget rootWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Timer<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attachRootWidget</span><span class=\"token punctuation\">(</span>rootWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// Takes a widget and attaches it to the [renderViewElement], creating it if</span>\n<span class=\"token comment\">/// necessary.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This is called by [runApp] to configure the widget tree.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// See also:</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">///  * [RenderObjectToWidgetAdapter.attachToRenderTree], which inflates a</span>\n<span class=\"token comment\">///    widget and attaches it to the render tree.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">attachRootWidget</span><span class=\"token punctuation\">(</span>Widget rootWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  _readyToProduceFrames <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  _renderViewElement <span class=\"token operator\">=</span> RenderObjectToWidgetAdapter<span class=\"token operator\">&lt;</span>RenderBox<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    container<span class=\"token punctuation\">:</span> renderView<span class=\"token punctuation\">,</span>\n    debugShortDescription<span class=\"token punctuation\">:</span> <span class=\"token string\">'[root]'</span><span class=\"token punctuation\">,</span>\n    child<span class=\"token punctuation\">:</span> rootWidget<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachToRenderTree</span><span class=\"token punctuation\">(</span>buildOwner<span class=\"token punctuation\">,</span> renderViewElement <span class=\"token operator\">as</span> RenderObjectToWidgetElement<span class=\"token operator\">&lt;</span>RenderBox<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>scheduleAttachRootWidget 是 WidgetsBinding 的一个成员方法，负责将我们的 app widget 附加到 RenderView 上。通过 attachRootWidget 可以看到创建了 _renderViewElement，可以理解为 RenderView 对应的 Element。最后根据 app widget 所形成的 widget tree 创建出对应的 element tree。</p>\n<h3>scheduleWarmUpFrame - 做什么的</h3>\n<p>runApp 的最后一步调用，当前两步完成了各种绑定以及渲染树的生成后，SchedulerBinding#scheduleWarmUpFrame 被调用。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// Schedule a frame to run as soon as possible, rather than waiting for</span>\n<span class=\"token comment\">/// the engine to request a frame in response to a system \"Vsync\" signal.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This is used during application startup so that the first frame (which is</span>\n<span class=\"token comment\">/// likely to be quite expensive) gets a few extra milliseconds to run.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Locks events dispatching until the scheduled frame has completed.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// If a frame has already been scheduled with [scheduleFrame] or</span>\n<span class=\"token comment\">/// [scheduleForcedFrame], this call may delay that frame.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// If any scheduled frame has already begun or if another</span>\n<span class=\"token comment\">/// [scheduleWarmUpFrame] was already called, this call will be ignored.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Prefer [scheduleFrame] to update the display in normal operation.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">scheduleWarmUpFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_warmUpFrame <span class=\"token operator\">||</span> schedulerPhase <span class=\"token operator\">!=</span> SchedulerPhase<span class=\"token punctuation\">.</span>idle<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  _warmUpFrame <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  Timeline<span class=\"token punctuation\">.</span><span class=\"token function\">startSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Warm-up frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> bool hadScheduledFrame <span class=\"token operator\">=</span> _hasScheduledFrame<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// We use timers here to ensure that microtasks flush in between.</span>\n  Timer<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>_warmUpFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handleBeginFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Timer<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>_warmUpFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">handleDrawFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// We call resetEpoch after this frame so that, in the hot reload case,</span>\n    <span class=\"token comment\">// the very next frame pretends to have occurred immediately after this</span>\n    <span class=\"token comment\">// warm-up frame. The warm-up frame's timestamp will typically be far in</span>\n    <span class=\"token comment\">// the past (the time of the last real frame), so if we didn't reset the</span>\n    <span class=\"token comment\">// epoch we would see a sudden jump from the old time in the warm-up frame</span>\n    <span class=\"token comment\">// to the new time in the \"real\" frame. The biggest problem with this is</span>\n    <span class=\"token comment\">// that implicit animations end up being triggered at the old time and</span>\n    <span class=\"token comment\">// then skipping every frame and finishing in the new time.</span>\n    <span class=\"token function\">resetEpoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _warmUpFrame <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hadScheduledFrame<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">scheduleFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Lock events so touch events etc don't insert themselves until the</span>\n  <span class=\"token comment\">// scheduled frame has finished.</span>\n  <span class=\"token function\">lockEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> endOfFrame<span class=\"token punctuation\">;</span>\n    Timeline<span class=\"token punctuation\">.</span><span class=\"token function\">finishSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里，scheduleWarmUpFrame 不等待 Vsync 信号进而触发 window#draw 回调，而是直接自行发现，进行一次绘制，并且使用锁定了事件分发，保证第一次绘制完成前不会有别的绘制插件来（dart 的消息循环机制）。</p>\n<p>handleBeginFrame 和 handleDrawFrame 在上面篇章 SchedulerBinding 有讲到，都是执行绘制任务，这些任务在 WidgetsBinding、各种Widget 中均可找到注册。</p>\n<p>渲染树的绘制在上面讲到的 RendererBinding 中具体体现。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// Pump the rendering pipeline to generate a frame.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// This method is called by [handleDrawFrame], which itself is called</span>\n<span class=\"token comment\">/// automatically by the engine when it is time to lay out and paint a frame.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Each frame consists of the following phases:</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 1. The animation phase: The [handleBeginFrame] method, which is registered</span>\n<span class=\"token comment\">/// with [Window.onBeginFrame], invokes all the transient frame callbacks</span>\n<span class=\"token comment\">/// registered with [scheduleFrameCallback], in registration order. This</span>\n<span class=\"token comment\">/// includes all the [Ticker] instances that are driving [AnimationController]</span>\n<span class=\"token comment\">/// objects, which means all of the active [Animation] objects tick at this</span>\n<span class=\"token comment\">/// point.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 2. Microtasks: After [handleBeginFrame] returns, any microtasks that got</span>\n<span class=\"token comment\">/// scheduled by transient frame callbacks get to run. This typically includes</span>\n<span class=\"token comment\">/// callbacks for futures from [Ticker]s and [AnimationController]s that</span>\n<span class=\"token comment\">/// completed this frame.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// After [handleBeginFrame], [handleDrawFrame], which is registered with</span>\n<span class=\"token comment\">/// [Window.onDrawFrame], is called, which invokes all the persistent frame</span>\n<span class=\"token comment\">/// callbacks, of which the most notable is this method, [drawFrame], which</span>\n<span class=\"token comment\">/// proceeds as follows:</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 3. The layout phase: All the dirty [RenderObject]s in the system are laid</span>\n<span class=\"token comment\">/// out (see [RenderObject.performLayout]). See [RenderObject.markNeedsLayout]</span>\n<span class=\"token comment\">/// for further details on marking an object dirty for layout.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 4. The compositing bits phase: The compositing bits on any dirty</span>\n<span class=\"token comment\">/// [RenderObject] objects are updated. See</span>\n<span class=\"token comment\">/// [RenderObject.markNeedsCompositingBitsUpdate].</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 5. The paint phase: All the dirty [RenderObject]s in the system are</span>\n<span class=\"token comment\">/// repainted (see [RenderObject.paint]). This generates the [Layer] tree. See</span>\n<span class=\"token comment\">/// [RenderObject.markNeedsPaint] for further details on marking an object</span>\n<span class=\"token comment\">/// dirty for paint.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 6. The compositing phase: The layer tree is turned into a [Scene] and</span>\n<span class=\"token comment\">/// sent to the GPU.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 7. The semantics phase: All the dirty [RenderObject]s in the system have</span>\n<span class=\"token comment\">/// their semantics updated (see [RenderObject.semanticsAnnotator]). This</span>\n<span class=\"token comment\">/// generates the [SemanticsNode] tree. See</span>\n<span class=\"token comment\">/// [RenderObject.markNeedsSemanticsUpdate] for further details on marking an</span>\n<span class=\"token comment\">/// object dirty for semantics.</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// For more details on steps 3-7, see [PipelineOwner].</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// 8. The finalization phase: After [drawFrame] returns, [handleDrawFrame]</span>\n<span class=\"token comment\">/// then invokes post-frame callbacks (registered with [addPostFrameCallback]).</span>\n<span class=\"token comment\">///</span>\n<span class=\"token comment\">/// Some bindings (for example, the [WidgetsBinding]) add extra steps to this</span>\n<span class=\"token comment\">/// list (for example, see [WidgetsBinding.drawFrame]).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// When editing the above, also update widgets/binding.dart's copy.</span>\n<span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">drawFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>renderView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pipelineOwner<span class=\"token punctuation\">.</span><span class=\"token function\">flushLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pipelineOwner<span class=\"token punctuation\">.</span><span class=\"token function\">flushCompositingBits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pipelineOwner<span class=\"token punctuation\">.</span><span class=\"token function\">flushPaint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendFramesToEngine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    renderView<span class=\"token punctuation\">.</span><span class=\"token function\">compositeFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this sends the bits to the GPU</span>\n    pipelineOwner<span class=\"token punctuation\">.</span><span class=\"token function\">flushSemantics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this also sends the semantics to the OS.</span>\n    _firstFrameSent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>flushLayout 布局</li>\n<li>flushCompositingBits 预处理，检查是否需要重绘</li>\n<li>flushPaint 绘制，只会绘制需要重绘的节点</li>\n<li>compositeFrame 生成绘制一帧的Scene对象，发送个GPU进行绘制</li>\n</ul>\n<blockquote>\n<p>drawFrame 对应的就是绘制流水线的具体操作</p>\n</blockquote>","frontmatter":{"title":"Flutter runApp","date":"September 03, 2020","tags":["flutter","launch","source"],"categories":"Flutter"}}},"pageContext":{"slug":"/flutter-run-app/","previous":{"fields":{"slug":"/flutter-state/"},"frontmatter":{"title":"Flutter State"}},"next":{"fields":{"slug":"/flutter-inherited-widget/"},"frontmatter":{"title":"Flutter InheritedWidget"}}}},"staticQueryHashes":["2841359383"]}