{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-architecture-components-2/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth's Blog"}},"markdownRemark":{"id":"d7aa2cc7-e8b3-532e-a469-686516cc2c89","excerpt":"记录分析第二篇---，官方地址\nhttps://developer.android.com/topic/libraries/architecture/livedata.html?hl=zh-cn LiveData…","html":"<p>记录分析<code class=\"language-text\">AAC</code>第二篇---<code class=\"language-text\">LiveData</code>，官方地址\n<a href=\"https://developer.android.com/topic/libraries/architecture/livedata.html?hl=zh-cn\">https://developer.android.com/topic/libraries/architecture/livedata.html?hl=zh-cn</a></p>\n<!-- More -->\n<h1>LiveData</h1>\n<p><code class=\"language-text\">LiveData</code>是一个数据持有类并赋予数据<code class=\"language-text\">Observer</code>属性，使用<code class=\"language-text\">LiveData</code>能够在有观察者的时候触发获取请求，并在生命周期符合<code class=\"language-text\">OnStart</code>状态条件下通知观察者数据变化，所以官方很吊的说明下面几点</p>\n<ul>\n<li>No memory leaks</li>\n<li>No crashes due to stopped activities</li>\n<li>Always up to date data</li>\n<li>Proper configuration change</li>\n<li>Sharing Resources</li>\n<li>No more manual lifecycle handling</li>\n</ul>\n<h2>使用</h2>\n<p>比如最常用的<code class=\"language-text\">UserInfo</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfoLiveData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//当有观察者观察时会触发onActive</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//假设获取UserInfo并返回</span>\n        <span class=\"token class-name\">UserInfo</span> userInfo <span class=\"token operator\">=</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">Activity</code>添加观察代码</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">UserInfoLiveData</span> userInfoLiveData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInfoLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    userInfoLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">UserInfo</span> userInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//此方法会在LiveData的setValue被调用</span>\n            <span class=\"token comment\">//在这里更新UI</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>分析</h2>\n<p>进入正题，这次从<code class=\"language-text\">LiveData</code>的<code class=\"language-text\">observe</code>方法开始追寻，看看发生了什么</p>\n<h3>observe(LifecycleOwner, Observer<T>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SafeIterableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifecycleBoundObserver</span><span class=\"token punctuation\">></span></span> mObservers <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">SafeIterableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@MainThread</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleOwner</span> owner<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DESTROYED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ignore</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">LifecycleBoundObserver</span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleBoundObserver</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">LifecycleBoundObserver</span> existing <span class=\"token operator\">=</span> mObservers<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">,</span> wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> existing<span class=\"token punctuation\">.</span>owner <span class=\"token operator\">!=</span> wrapper<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot add the same observer\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\" with different lifecycles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        owner<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">activeStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token function\">isActiveState</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个<code class=\"language-text\">observe</code>方法源码上面一堆密密麻麻的注释，大概重点就是当数据有变化的时候就会通知观察者。\n首先不用多说，确定下当前生命周期的状态，不满足条件就<code class=\"language-text\">return</code>，之后将传进来的<code class=\"language-text\">owner</code>和<code class=\"language-text\">observer``new</code>了个<code class=\"language-text\">LifecycleBoundObserver</code>，先不管。然后通过<code class=\"language-text\">mObservers</code>从<code class=\"language-text\">Map</code>中看看有没有相同的<code class=\"language-text\">LifecycleBoundObserver</code>，根据<code class=\"language-text\">Observer</code>为<code class=\"language-text\">key</code>去查找，如果存在也<code class=\"language-text\">retuen</code>。这里注意官方不允许同个<code class=\"language-text\">Observer</code>添加到不同的<code class=\"language-text\">owner</code>。接着调用<code class=\"language-text\">owner.getLifecycle().addObserver(wrapper);</code>。。。看来这个<code class=\"language-text\">LifecycleBoundObserver</code>也是实现了<code class=\"language-text\">LifecycleObserver</code>(至于这个点可以看第一篇)。最后调用<code class=\"language-text\">LifecycleBoundObserver</code>的<code class=\"language-text\">activeStateChanged</code>方法，具体实现刚好跟刚才不管的一起分析</p>\n<h3>LifecycleBoundObserver</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LifecycleBoundObserver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleObserver</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LifecycleOwner</span> owner<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> active<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> lastVersion <span class=\"token operator\">=</span> START_VERSION<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">LifecycleBoundObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LifecycleOwner</span> owner<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observer <span class=\"token operator\">=</span> observer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unused\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token annotation punctuation\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Lifecycle</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Event</span><span class=\"token punctuation\">.</span>ON_ANY<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">onStateChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DESTROYED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// immediately set active state, so we'd never dispatch anything to inactive</span>\n            <span class=\"token comment\">// owner</span>\n            <span class=\"token function\">activeStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token function\">isActiveState</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">activeStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> newActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newActive <span class=\"token operator\">==</span> active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            active <span class=\"token operator\">=</span> newActive<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> wasInactive <span class=\"token operator\">=</span> <span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">+=</span> active <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wasInactive <span class=\"token operator\">&amp;&amp;</span> active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">onInactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">dispatchingValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>刚才在<code class=\"language-text\">observe</code>方法内实例化时传进来的<code class=\"language-text\">owner</code>和<code class=\"language-text\">observer</code>只是赋值了一下内部变量。其次<code class=\"language-text\">owner.getLifecycle().addObserver(wrapper);</code>意味着<code class=\"language-text\">onStateChange()</code>能够接收生命周期的变化通知，果不其然<code class=\"language-text\">onStateChange</code>中调用了\n<code class=\"language-text\">activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</code>。</p>\n<blockquote>\n<p>isActiveState() 返回 boolean -> 当前生命周期状态是否至少处于START状态之后</p>\n</blockquote>\n<p><code class=\"language-text\">activeStateChanged</code>方法会根据传进来的<code class=\"language-text\">newActive</code>状态去调用<code class=\"language-text\">onActive()</code>或者<code class=\"language-text\">onInactive()</code>，也就是当有观察者主动观察时会调用<code class=\"language-text\">onActive()</code>进行数据获取请求，并在请求数据成功后手动调用<code class=\"language-text\">setValue(T)</code>通知观察者数据变化。<code class=\"language-text\">setValue(T)</code>内调用<code class=\"language-text\">dispatchingValue()</code>方法最后回调<code class=\"language-text\">onChanged(T)</code>通知观察者数据变化从而更新UI。</p>\n<p>一句句理解</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//当有观察者观察的时候或者生命周期变化的时候会调用此方法</span>\n<span class=\"token comment\">//newActive : 当前生命周期是否START状态之后</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">activeStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> newActive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//如果新状态与当前状态一致则return</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newActive <span class=\"token operator\">==</span> active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//标明当前是否处于激活状态</span>\n    active <span class=\"token operator\">=</span> newActive<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//mActiveCount是有多少个观察者在观察</span>\n    <span class=\"token comment\">//所以wasInactive表示在这之前的观察者数</span>\n    <span class=\"token keyword\">boolean</span> wasInactive <span class=\"token operator\">=</span> <span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//相应的+-1</span>\n    <span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">+=</span> active <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//如果是第一个观察并且激活状态则回调onActive()去获取数据</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wasInactive <span class=\"token operator\">&amp;&amp;</span> active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//对应的取消绑定</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mActiveCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onInactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//下发数据变化 会回调onChanged(T)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatchingValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>dispatchingValue(LifecycleBoundObserver)</h3>\n<p>下面看<code class=\"language-text\">dispatchingValue()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchingValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">LifecycleBoundObserver</span> initiator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDispatchingValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mDispatchInvalidated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mDispatchingValue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            mDispatchInvalidated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initiator <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">considerNotify</span><span class=\"token punctuation\">(</span>initiator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                initiator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LifecycleBoundObserver</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span>\n                        mObservers<span class=\"token punctuation\">.</span><span class=\"token function\">iteratorWithAdditions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">considerNotify</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDispatchInvalidated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mDispatchInvalidated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mDispatchingValue <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方法的逻辑判断主要依赖于两个<code class=\"language-text\">boolean</code>:<code class=\"language-text\">mDispatchingValue</code>和<code class=\"language-text\">mDispatchInvalidated</code>。看完源码后感觉很巧妙，利用两个变量分发数据的变化通知观察者更新UI，并当有新的数据变化的时候<code class=\"language-text\">break</code>循环，减少了一次旧数据不必要的UI更新，很<code class=\"language-text\">nice</code>，点个赞。</p>\n<h3>mVersion</h3>\n<p><code class=\"language-text\">LiveData</code>内部维护了一个变量<code class=\"language-text\">mVersion</code>数据版本控制，计算数据变化次数，并在<code class=\"language-text\">dispatchingValue()</code>下发中与观察者的内部计数<code class=\"language-text\">version</code>判断从而调用<code class=\"language-text\">onChanged(T)</code>。</p>\n<h2>额外用法</h2>\n<p><code class=\"language-text\">LiveData</code>还有两个很有用的<code class=\"language-text\">API</code></p>\n<ul>\n<li>\n<p>observeForever(Observer<T> observer)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MainThread</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">observeForever</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>ALWAYS_ON<span class=\"token punctuation\">,</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ALWAYS_ON</code>也是一个<code class=\"language-text\">LifecycleOwner</code>，但是永远处于<code class=\"language-text\">RESUME</code>状态下，也就是使用这个方法的观察者将永远接收到数据变化，无论生命周期的影响，所以在适当的时候需要开发者手动调用<code class=\"language-text\">removeObserver(Observer)</code>取消观察。</p>\n</li>\n<li>\n<p>postValue(T value)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">boolean</span> postTask<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>mDataLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         postTask <span class=\"token operator\">=</span> mPendingData <span class=\"token operator\">==</span> NOT_SET<span class=\"token punctuation\">;</span>\n         mPendingData <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>postTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token class-name\">AppToolkitTaskExecutor</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postToMainThread</span><span class=\"token punctuation\">(</span>mPostValueRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>与<code class=\"language-text\">setValue(T)</code>不同的<code class=\"language-text\">postValue(T)</code>允许在其它线程调用</p>\n</li>\n</ul>\n<h1>Transformations of LiveData</h1>\n<p>官方提供<code class=\"language-text\">Transformations</code>工具帮助方便的转换<code class=\"language-text\">LiveData</code>并且依旧拥有<code class=\"language-text\">被转换者</code>的数据变化通知。下面给个🌰</p>\n<blockquote>\n<p>map(LiveData<X> source, final Function&#x3C;X, Y> func)\nswitchMap(LiveData<X> trigger, final Function&#x3C;X, LiveData<Y>> func)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringLiveData <span class=\"token operator\">=</span> <span class=\"token class-name\">Transformations</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>userInfoLiveData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserInfo</span> input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stringLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onChanged: s === \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">stringLiveData</code>通过<code class=\"language-text\">Transformations.map()</code>方法实例化，在<code class=\"language-text\">apply(UserInfo input)</code>中取出需要的<code class=\"language-text\">String</code>数据返回，最后同样的<code class=\"language-text\">observe</code>一下，将会拥有的功能即：当<code class=\"language-text\">userInfo</code>数据改变，同样会通知此<code class=\"language-text\">LiveData</code>的观察者即回调<code class=\"language-text\">onChanged(T)</code>。</p>\n<h2>分析</h2>\n<p>官方提供这个转换<code class=\"language-text\">API</code>的原因是开发者可能需要在数据变化发送给观察者之前对数据进行改变等操作，这样的确会方便很多。那么开始看源码吧~</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MainThread</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Y</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">></span></span> func<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">MediatorLiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Y</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediatorLiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">X</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>先看<code class=\"language-text\">map()</code>，这里面涉及到三个<code class=\"language-text\">Observer</code>，可能会有点绕。首先一进来就实例了一个<code class=\"language-text\">MediatorLiveData&lt;Y&gt;</code>，也是一个<code class=\"language-text\">LiveData</code>，<code class=\"language-text\">map()</code>返回的就是这个家伙。返回之前调用了<code class=\"language-text\">addSource()</code>传入了第一个<code class=\"language-text\">Observer</code>。<code class=\"language-text\">map()</code>方法的第二个参数<code class=\"language-text\">Function</code>就是在这里被回调。接着看<code class=\"language-text\">addSource()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">SafeIterableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LiveData</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Source</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mSources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SafeIterableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@MainThread</span>\n    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> onChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Source</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Source</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> onChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Source</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> existing <span class=\"token operator\">=</span> mSources<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> existing<span class=\"token punctuation\">.</span>mObserver <span class=\"token operator\">!=</span> onChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"This source was already added with the different observer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasActiveObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">plug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>看起来似曾相识，<code class=\"language-text\">LiveData.observe()</code>的逻辑跟这个方法的逻辑差不多一个样，原理都是一样的。这里实例化了一个<code class=\"language-text\">Source</code>，主要是为了保存一下数据变化的<code class=\"language-text\">version</code>，好判断通知观察者的时机。\n这里有个<code class=\"language-text\">hasActiveObservers()</code>的判断，判断是否有观察者观察，有的话执行<code class=\"language-text\">plug()</code>，那么看向<code class=\"language-text\">Source</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Source</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> mLiveData<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> mObserver<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mVersion <span class=\"token operator\">=</span> START_VERSION<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Source</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> liveData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mLiveData <span class=\"token operator\">=</span> liveData<span class=\"token punctuation\">;</span>\n            mObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mVersion <span class=\"token operator\">!=</span> mLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        mVersion <span class=\"token operator\">=</span> mLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        observer<span class=\"token punctuation\">.</span><span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">plug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">observeForever</span><span class=\"token punctuation\">(</span>mObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">unplug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mLiveData<span class=\"token punctuation\">.</span><span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>mObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">plug()</code>和<code class=\"language-text\">unplug()</code>不必多说，标准的注册取消注册步骤。看看构造函数里面又\b来了个<code class=\"language-text\">Observer</code>，也就是第二个<code class=\"language-text\">Observer</code>，在回调函数<code class=\"language-text\">onChanged</code>里判断了下<code class=\"language-text\">version</code>，前后不一致的话手动调用<code class=\"language-text\">observer.onChanged(v);</code>，也就是第一个<code class=\"language-text\">observer</code>。有点绕了0 0</p>\n<p>那么第三个<code class=\"language-text\">Observer</code>在哪里呢，其实就是一开始通过<code class=\"language-text\">map()</code>转换得来的<code class=\"language-text\">LiveData</code>:<code class=\"language-text\">stringLiveData</code>进行观察的<code class=\"language-text\">observer</code>。具体流程如下\n1.通过<code class=\"language-text\">map()</code>转换拿到<code class=\"language-text\">MediatorLiveData</code>\n2.调用<code class=\"language-text\">observe()</code>对转换来的<code class=\"language-text\">MediatorLiveData</code>进行观察\n3.生命周期到达<code class=\"language-text\">START</code>后会自动调用<code class=\"language-text\">onActive()</code>\n4.<code class=\"language-text\">MediatorLiveData.onActive()</code>会遍历调用<code class=\"language-text\">plug()</code>\n5.<code class=\"language-text\">plug()</code>中对<code class=\"language-text\">源LiveData</code>调用<code class=\"language-text\">observe()</code>观察\n6.<code class=\"language-text\">源LiveData</code>回调<code class=\"language-text\">onChanged()</code>即<code class=\"language-text\">Source</code>中的<code class=\"language-text\">observer</code>(第二个<code class=\"language-text\">observer</code>)\n7.继续回调第一个<code class=\"language-text\">onChanged()</code>也就是<code class=\"language-text\">Transformations.map()</code>中的<code class=\"language-text\">Observer</code>\n8.<code class=\"language-text\">result.setValue(func.apply(x));</code>\n9.最终回调第三个<code class=\"language-text\">onChanged()</code>：开发者自己的<code class=\"language-text\">observer</code>从而更新UI</p>\n<p>有点累，饶了半天，不过终于知道为何源数据发生数据变化时，<code class=\"language-text\">新LiveData</code>也能及时响应的原因。</p>\n<p>至于<code class=\"language-text\">switchMap()</code>更粗暴更自由化，内部还会自动判断前后<code class=\"language-text\">LiveData</code>的不同自动取消观察等等，所以开发者不需要担心内存泄露的问题。</p>\n<h1>总结</h1>\n<p><code class=\"language-text\">LiveData</code>的用法还是挺方便的，内部帮助持有需要的数据，并使用<code class=\"language-text\">观察者模式</code>对数据变化进行观察，并拥有生命周期的特效，所以不用担心内存泄露等问题。\n对于像官方提供的例子中的<code class=\"language-text\">Location</code>或者开发项目中最常见的<code class=\"language-text\">UserInfo</code>，甚至可以用<code class=\"language-text\">static</code>修饰<code class=\"language-text\">LiveData</code>使其可以供应给所有需要的地方。</p>","frontmatter":{"title":"Android Architecture Components分析记录（二）","date":"August 16, 2017","tags":["aac"],"categories":"Android"}}},"pageContext":{"slug":"/android-architecture-components-2/","previous":{"fields":{"slug":"/android-architecture-components/"},"frontmatter":{"title":"Android Architecture Components分析记录（一）"}},"next":{"fields":{"slug":"/android-architecture-components-3/"},"frontmatter":{"title":"Android Architecture Components分析记录（三）"}}}},"staticQueryHashes":["2841359383"]}