{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-architecture-components-3/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"c6fe4aad-3da9-56bb-8f63-7798442922fe","excerpt":"记录分析第三篇---，官方地址\nhttps://developer.android.com/topic/libraries/architecture/viewmodel.html?hl=zh-cn…","html":"<p>记录分析<code class=\"language-text\">AAC</code>第三篇---<code class=\"language-text\">ViewModel</code>，官方地址\n<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html?hl=zh-cn\">https://developer.android.com/topic/libraries/architecture/viewmodel.html?hl=zh-cn</a></p>\n<!-- More -->\n<h2>前言</h2>\n<p>由于<code class=\"language-text\">UI组件</code>可能会因为某些原因（比如旋转屏幕等）导致被系统销毁或者重建从而导致所持数据丢失，通知针对这种状况采取的做法是通过<code class=\"language-text\">onSaveInstanceState</code>保存数据，并在界面重建后取出来，例如<code class=\"language-text\">EditText</code>编辑框中的内容，然而这种做法只适应于少量数据甚至最好只存储基本类型的数据。</p>\n<p>官方针对此问题设计了<code class=\"language-text\">ViewModel</code>（当然不止这个原因），例如一个列表页，以往的做法下旋转屏幕后还需要重新请求数据，使用<code class=\"language-text\">ViewModel</code>后可以将减少这一次请求，而且这一切恢复操作完全不需要我们管理，这样又能减轻界面的负担。</p>\n<p>下面先看看<code class=\"language-text\">ViewModel</code>的使用方法</p>\n<h2>使用</h2>\n<p>先创建<code class=\"language-text\">ViewModel</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfoModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MutableLiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">></span></span> mUserInfoMutableLiveData<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserInfoLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mUserInfoMutableLiveData <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mUserInfoMutableLiveData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutableLiveData</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">loadUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> mUserInfoMutableLiveData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//例如网络加载操作</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后就可以在<code class=\"language-text\">Activity</code>使用</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">UserInfoModel</span> userInfoModel <span class=\"token operator\">=</span> <span class=\"token class-name\">ViewModelProviders</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserInfoModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userInfoModel<span class=\"token punctuation\">.</span><span class=\"token function\">getUserInfoLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">UserInfo</span> userInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//更新UI</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>注意是通过<code class=\"language-text\">ViewModelProviders</code>而不是<code class=\"language-text\">new</code>拿到<code class=\"language-text\">ViewModel</code>实例</p>\n</blockquote>\n<h2>分析</h2>\n<p>在上门的例子可以看到实例<code class=\"language-text\">ViewModel</code>的方法不是<code class=\"language-text\">new</code>而是通过<code class=\"language-text\">ViewModelProviders</code>取得</p>\n<h3>of()</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MainThread</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ViewModelProvider</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">initializeFactoryIfNeeded</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewModelStores</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sDefaultFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DefaultFactory</span> sDefaultFactory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initializeFactoryIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span> application<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sDefaultFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sDefaultFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultFactory</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">of()</code>方法其实有四个，分别是</p>\n<ul>\n<li>of(@NonNull Fragment fragment)</li>\n<li>of(@NonNull FragmentActivity activity)</li>\n<li>of(@NonNull Fragment fragment, @NonNull Factory factory)</li>\n<li>of(@NonNull FragmentActivity activity,@NonNull Factory factory)</li>\n</ul>\n<p>第二个参数是支持自定义<code class=\"language-text\">Factory</code>，由于<code class=\"language-text\">ViewModel</code>是通过反射实例化的，所以默认的构造函数的无参的，如果需要操作系统服务，可以选择继承<code class=\"language-text\">AndroidViewModel</code>，这也是第一句<code class=\"language-text\">initializeFactoryIfNeeded(activity.getApplication())</code>初始化<code class=\"language-text\">sDefaultFactory</code>的原因，为了在后面反射时传入<code class=\"language-text\">application</code>。</p>\n<p><code class=\"language-text\">of()</code>返回的是一个<code class=\"language-text\">ViewModelProvider</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewModelStore</span> store<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Factory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mFactory <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mViewModelStore <span class=\"token operator\">=</span> store<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>只是赋值了下<code class=\"language-text\">ViewModelStore</code>和<code class=\"language-text\">Factory</code>，具体实例化是在<code class=\"language-text\">get()</code>中。</p>\n<h3>ViewModelStore</h3>\n<p>先看看<code class=\"language-text\">ViewModelStore</code>怎么来的</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ViewModelStores</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">holderFragmentFor</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HolderFragment</span> <span class=\"token function\">holderFragmentFor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sHolderFragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">holderFragmentFor</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">HolderFragment</span> <span class=\"token function\">holderFragmentFor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentActivity</span> activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">FragmentManager</span> fm <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">HolderFragment</span> holder <span class=\"token operator\">=</span> <span class=\"token function\">findHolderFragment</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> holder<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            holder <span class=\"token operator\">=</span> mNotCommittedActivityHolders<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> holder<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mActivityCallbacksIsAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mActivityCallbacksIsAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                activity<span class=\"token punctuation\">.</span><span class=\"token function\">getApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span>mActivityCallbacks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            holder <span class=\"token operator\">=</span> <span class=\"token function\">createHolderFragment</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mNotCommittedActivityHolders<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> holder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> holder<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HolderFragment</span> <span class=\"token function\">createHolderFragment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FragmentManager</span> fragmentManager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">HolderFragment</span> holder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HolderFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fragmentManager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>holder<span class=\"token punctuation\">,</span> HOLDER_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commitAllowingStateLoss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> holder<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ViewModelStore</code>是通过一个<code class=\"language-text\">HolderFragment.getViewModelStore()</code>获得，这个<code class=\"language-text\">HolderFragment</code>是一个透明无界面的<code class=\"language-text\">Fragment</code>，<code class=\"language-text\">ViewModelStores</code>就是保存在<code class=\"language-text\">HolderFragment</code>中。随后通过<code class=\"language-text\">FragmentManager</code>将<code class=\"language-text\">HolderFragment</code>添加到<code class=\"language-text\">Activity</code>，这也是为什么这个库要依赖于<code class=\"language-text\">FragmentActivity</code>的原因。</p>\n<p>接着看<code class=\"language-text\">getViewModelStore()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token function\">getViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mViewModelStore<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">ViewModelStore</span> mViewModelStore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewModelStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewModelStore</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> mMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewModel</span> viewModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ViewModel</span> oldViewModel <span class=\"token operator\">=</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldViewModel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            oldViewModel<span class=\"token punctuation\">.</span><span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ViewModel</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     *  Clears internal storage and notifies ViewModels that they are no longer used.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewModel</span> vm <span class=\"token operator\">:</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            vm<span class=\"token punctuation\">.</span><span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以<code class=\"language-text\">ViewModel</code>是被保存在这里，通过一个<code class=\"language-text\">HashMap</code>进行存取。\n咦，等一下，这个<code class=\"language-text\">HashMap</code>以及这个<code class=\"language-text\">ViewModelStore</code>都是局部变量，旋转屏幕也会销毁呀，明明不能保存数据。</p>\n<h3>setRetainInstance</h3>\n<p>这时候看到了<code class=\"language-text\">HolderFragment</code>的构造函数</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">HolderFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setRetainInstance</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>查看<code class=\"language-text\">API</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * Control whether a fragment instance is retained across Activity\n     * re-creation (such as from a configuration change).  This can only\n     * be used with fragments not in the back stack.  If set, the fragment\n     * lifecycle will be slightly different when an activity is recreated:\n     * &lt;ul>\n     * &lt;li> {@link #onDestroy()} will not be called (but {@link #onDetach()} still\n     * will be, because the fragment is being detached from its current activity).\n     * &lt;li> {@link #onCreate(Bundle)} will not be called since the fragment\n     * is not being re-created.\n     * &lt;li> {@link #onAttach(Activity)} and {@link #onActivityCreated(Bundle)} &lt;b>will&lt;/b>\n     * still be called.\n     * &lt;/ul>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRetainInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> retain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mRetainInstance <span class=\"token operator\">=</span> retain<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>设定了<code class=\"language-text\">retain=true</code>之后，<code class=\"language-text\">Fragment</code>的生命周期将会改变，不会因为旋转屏幕等操作重建，但是会有以下几点后果</p>\n<ul>\n<li><code class=\"language-text\">onDestroy()</code>将不会回调</li>\n<li><code class=\"language-text\">onDetach</code>仍会回调，因为<code class=\"language-text\">Activity</code>重建了，所以<code class=\"language-text\">Fragment</code>暂时分离</li>\n<li><code class=\"language-text\">onCreate(Bundle)</code>也不会回调，因为<code class=\"language-text\">Fragment</code>并没有销毁</li>\n<li><code class=\"language-text\">onAttach()</code>、<code class=\"language-text\">onActivityCreated(Bundle)</code>仍会回调</li>\n</ul>\n<p>通过<code class=\"language-text\">setRetainInstance(true)</code>，改变了<code class=\"language-text\">HolderFragment</code>的部分生命周期流程，从而保持<code class=\"language-text\">ViewModelStore</code>从而保持<code class=\"language-text\">ViewModel</code>，所以保持了<code class=\"language-text\">ViewModel</code>中的数据。</p>\n<h3>get()</h3>\n<p>最后看<code class=\"language-text\">ViewModelProvider.get()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> canonicalName <span class=\"token operator\">=</span> modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canonicalName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Local and anonymous classes can not be ViewModels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>DEFAULT_KEY <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> canonicalName<span class=\"token punctuation\">,</span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ViewModel</span> viewModel <span class=\"token operator\">=</span> mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//noinspection unchecked</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//noinspection StatementWithEmptyBody</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewModel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// TODO: log a warning.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        viewModel <span class=\"token operator\">=</span> mFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mViewModelStore<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//noinspection unchecked</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> viewModel<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>先在<code class=\"language-text\">ViewModelStore</code>拿<code class=\"language-text\">viewModel</code>，拿到直接返回，拿不到就通过<code class=\"language-text\">Factory.create()</code>反射实例化</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AndroidViewModel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">//noinspection TryWithIdenticalCatches</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>mApplication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchMethodException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//noinspection TryWithIdenticalCatches</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> modelClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InstantiationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create an instance of \"</span> <span class=\"token operator\">+</span> modelClass<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果是<code class=\"language-text\">AndroidViewModel</code>的话，则会带多个<code class=\"language-text\">application</code>参数，所以官方提供自定义<code class=\"language-text\">Factory</code>自行操作</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n     * Implementations of {@code Factory} interface are responsible to instantiate ViewModels.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Factory</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * Creates a new instance of the given {@code Class}.\n         * &lt;p>\n         *\n         * @param modelClass a {@code Class} whose instance is requested\n         * @param &lt;T>        The type parameter for the ViewModel.\n         * @return a newly created ViewModel\n         */</span>\n        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ViewModel</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> modelClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>总结</h2>\n<p><code class=\"language-text\">ViewModel</code>负责帮<code class=\"language-text\">UI</code>准备数据，减轻 UI 负担，并能够自动保存数据防止某些场景丢失、快速读取更新 UI。\n由于<code class=\"language-text\">LiveData</code>的观察者特性，所以<code class=\"language-text\">ViewModel</code>还可以实现数据共享，例如最常见的<code class=\"language-text\">ViewPager</code>绑定着多个<code class=\"language-text\">Fragment</code>，某些场景会涉及到<code class=\"language-text\">Fragment</code>之间的通信，以往的做法要不是通过<code class=\"language-text\">Activity</code>进行中转通信，要不是使用事件总线。使用<code class=\"language-text\">ViewModel</code>可以很方便解决这个问题，通过<code class=\"language-text\">of(getActivity())</code>绑定到<code class=\"language-text\">Activity</code>，这样的<code class=\"language-text\">ViewModel</code>将会是同一个实例，也就能共同使用同一份数据从而进行通信等操作。</p>\n<p><code class=\"language-text\">ViewModel</code>的生命周期会持续到<code class=\"language-text\">Activity.onDestroy</code>、<code class=\"language-text\">Fragment.onDetach</code>，并会回调<code class=\"language-text\">onCleared</code>，所以有些大型操作依旧得进行解除。</p>","frontmatter":{"title":"Android Architecture Components分析记录（三）","date":"August 18, 2017","tags":["aac"],"categories":"Android"}}},"pageContext":{"slug":"/android-architecture-components-3/","previous":{"excerpt":"记录分析第二篇---，官方地址\nhttps://developer.android.com/topic/libraries/architecture/livedata.html?hl=zh-cn LiveData…","fields":{"slug":"/android-architecture-components-2/"},"frontmatter":{"date":"August 16, 2017","title":"Android Architecture Components分析记录（二）","tags":["aac"],"categories":"Android"}},"next":{"excerpt":"开发中难免遇到单页面多任务的情景，比如详情页的信息可能需要从多个接口获取，虽然以用户体验来看多个接口返回数据互不影响，哪个接口先返回数据就先显示，但在某些特殊情景下，需要多个接口都成功返回数据再统一更新 UI…","fields":{"slug":"/escape-rxjava-observable-zip/"},"frontmatter":{"date":"May 28, 2018","title":"摆脱Observable.zip烦人的zipper参数","tags":["rxJava"],"categories":"Android"}}}},"staticQueryHashes":["2841359383"]}