{"componentChunkName":"component---src-templates-blog-post-js","path":"/qianqianqianhouhouhou/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"5b603e13-aa87-5e62-982b-a0495b1abc07","excerpt":". 前言 这两个星期是我最完整的一次全栈开发经历，前端，后端，服务器，域名。虽然之前也搭过服务器（本博客网站），但是这次也遇到了些许问题，包括、、等等，让我慢慢一一道来 eggjs…","html":"<p>.</p>\n<!-- More -->\n<h2>前言</h2>\n<p>这两个星期是我最完整的一次全栈开发经历，前端<code class=\"language-text\">vue</code>，后端<code class=\"language-text\">eggjs</code>，服务器<code class=\"language-text\">淘宝</code>，域名<code class=\"language-text\">namecheap</code>。虽然之前也搭过服务器（本博客网站），但是这次也遇到了些许问题，包括<code class=\"language-text\">eggjs</code>、<code class=\"language-text\">sequelize</code>、<code class=\"language-text\">Github Actions</code>等等，让我慢慢一一道来</p>\n<h2>eggjs</h2>\n<p>后端开发这块我之前是写<code class=\"language-text\">java</code>的，这次在服务器性能一般的考虑下，鉴于前端的<code class=\"language-text\">js</code>，故决定后端也使用<code class=\"language-text\">js</code>，正好也学一学<code class=\"language-text\">nodejs</code>。一开始后端框架选型的时候对准着<code class=\"language-text\">koa</code>，不过正好想到<code class=\"language-text\">eggjs</code>好像近期听得比较多，所以就上<code class=\"language-text\">eggjs</code>官网了解一下，对<code class=\"language-text\">koa</code>也没有很熟，那干脆就你了</p>\n<h3>打包问题</h3>\n<p><code class=\"language-text\">eggjs</code>倒是用着没啥问题，就是最后打包部署的时候有点疑惑，根据<a href=\"https://eggjs.org/zh-cn/core/deployment.html\">官方介绍</a>，<code class=\"language-text\">eggjs</code>内置了<code class=\"language-text\">egg-cluster</code>代替<code class=\"language-text\">pm2</code>启动进程服务，使用是在项目的目录下直接运行<code class=\"language-text\">npm start</code>，那意味着项目在服务器需要是源码级别的文件，而不是想<code class=\"language-text\">vue</code>项目打包混淆后的<code class=\"language-text\">dist/</code>代替，希望看到这里的你能解答我的疑惑</p>\n<h3>sequelize</h3>\n<ul>\n<li>npm start —env=prod</li>\n<li>npx sequelize migration:generate —name=init-users</li>\n<li>npx sequelize db:migrate —env production</li>\n<li>npx sequelize db:migrate:undo —env production</li>\n</ul>\n<h2>服务器</h2>\n<ul>\n<li>cat id<em>rsa.pub >> authorized</em>keys</li>\n</ul>\n<p>很多跟 SELinux 有关，比方说</p>\n<ul>\n<li>Nginx 安装启动后竟然连欢迎页都打不开</li>\n<li>配置 include 外部 conf 文件竟然无效</li>\n<li>读取 conf 文件竟然权限不足</li>\n<li>配置上游但是不允许访问</li>\n</ul>\n<p>基本上遇到很多之前搭服务器没遇到过的问题，遇到这些异常问题时，可以考虑下是否是 SELinux 的问题，试着先临时关闭它排查下</p>\n<ul>\n<li>sestatus -v 或 getenforce 查看状态</li>\n<li>setenforce 0 临时关闭</li>\n<li>vim /etc/selinux/config; SELINUX=disabled 永久关闭</li>\n<li>netstat -tnpl</li>\n<li>sudo firewall-cmd —zone=public —add-port=3000/tcp —permanent</li>\n<li>sudo firewall-cmd —reload</li>\n<li>sudo firewall-cmd —remove-port=3000/tcp —permanent</li>\n<li>sudo firewall-cmd —reload</li>\n</ul>\n<h3>Node</h3>\n<ul>\n<li>curl —silent —location <a href=\"https://rpm.nodesource.com/setup_10.x\">https://rpm.nodesource.com/setup_10.x</a> | bash -</li>\n<li>yum install nodejs</li>\n</ul>\n<h3>Nginx</h3>\n<ul>\n<li>yum install epel-release 安装 epel 源</li>\n<li>yum install nginx</li>\n<li>service nginx start</li>\n<li>systemctl list-unit-files|grep nginx</li>\n<li>systemctl enable nginx</li>\n<li>vim /etc/nginx/nginx.conf</li>\n<li>include xxx/xxx/*.conf</li>\n</ul>\n<h4>欢迎页无法访问</h4>\n<p>SELinux 限制</p>\n<ul>\n<li>sudo firewall-cmd —permanent —zone=public —add-service=http</li>\n<li>sudo firewall-cmd —permanent —zone=public —add-service=https</li>\n<li>sudo firewall-cmd —reload</li>\n</ul>\n<p>Firewalld</p>\n<ul>\n<li>service firewalld stop</li>\n<li>firewall-cmd —zone=public —add-port=80/tcp —permanent</li>\n<li>service firewalld reload</li>\n</ul>\n<h4>无权限读取 conf 文件</h4>\n<p>同样是 SELinux 限制</p>\n<ul>\n<li>sudo restorecon xxx/xxx.conf</li>\n</ul>\n<h4>配置上游但是不允许访问</h4>\n<p><a href=\"https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx\">https://stackoverflow.com/questions/23948527/13-permission-denied-while-connecting-to-upstreamnginx</a></p>\n<ul>\n<li>getsebool -a | grep httpd 发现其中 httpd<em>can</em>network_connect –> off</li>\n<li>setsebool httpd<em>can</em>network_connect 1</li>\n</ul>\n<h3>Mysql</h3>\n<ul>\n<li>wget <a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\">https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</a></li>\n<li>rpm -ivh mysql80-community-release-el7-3.noarch.rpm</li>\n<li>yum install mysql-server</li>\n<li>service mysqld start</li>\n<li>systemctl list-unit-files|grep mysqld</li>\n<li>systemctl enable mysqld</li>\n<li>mysqld —initialize</li>\n<li>grep ‘temporary password’ /var/log/mysqld.log</li>\n<li>mysql -u root -p\n— alter user ‘root’@‘localhost’ identified by ‘yourpassword’;\n— show databases;\n— use mysql;</li>\n<li>rpm -qa|grep mysql 查看历史版本</li>\n</ul>\n<h3>cron 自启动 eggjs</h3>\n<p>nginx、mysql 这些服务本身就支持设置开机启动，但是 eggjs 项目不行，这时候就可以利用 cron 服务</p>\n<ul>\n<li>yum install crontabs</li>\n<li>service crond start</li>\n<li>syctemctl enable crond</li>\n<li>vim xxx.sh 内容是启动 eggjs 的相关命令</li>\n<li>vim xxx.cron 内容是 @reboot xxx.sh</li>\n<li>crontab xxx.cron</li>\n<li>crontab -l 查看是否配置成功</li>\n</ul>\n<h2>GitHub Actions 自动部署</h2>\n<h3>sftp</h3>\n<p>在<code class=\"language-text\">Github Actions Marketplace</code>找到个<a href=\"https://github.com/marketplace/actions/sftp-deploy\">SFTP Deploy</a>帮助在构建后利用<code class=\"language-text\">sftp</code>将文件上传到服务器</p>\n<p>比方说 vue 项目打包出<code class=\"language-text\">dist/</code>然后上传</p>\n<ul>\n<li>secrets.xxx 是类似环境变量，在 github 上的项目设置里配置</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_VERSION</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10.x\"</span> <span class=\"token comment\"># set this to the node version to use</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Deploy\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.NODE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.NODE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> npm install<span class=\"token punctuation\">,</span> build<span class=\"token punctuation\">,</span> and test\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm install\n          npm run build</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> push\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> izyhang/SFTP<span class=\"token punctuation\">-</span>Deploy<span class=\"token punctuation\">-</span>Action@v1.1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_NAME }}\"</span>\n          <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_IP }}\"</span>\n          <span class=\"token key atrule\">ssh_private_key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SSH_PRIVATE_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">local_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./dist/*\"</span>\n          <span class=\"token key atrule\">remote_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_TARGET_PATH }}\"</span></code></pre></div>\n<h3>压缩后再 sftp</h3>\n<p>项目文件多起来之后不压缩再上传实在效率低，那么自然要用到<code class=\"language-text\">tar</code>命令，但是</p>\n<p>1、<code class=\"language-text\">tar -zcf ./release.tgz .</code> -> 压缩到项目文件夹下会报错\n2、<code class=\"language-text\">tar -zcf ../release.tgz .</code> -> 压缩到项目上级文件夹不会报错但是 sftp 拿不到该文件\n3、最后 -> <code class=\"language-text\">tar -zcf ../release.tgz .</code> -> <code class=\"language-text\">cp ../release.tgz ./release.tgz</code> -> 才搞定</p>\n<p>前两步为什么不行我实在找不到原因</p>\n<h3>sftp 后解压</h3>\n<p>上一步压缩后上传到服务器需要解压等后续操作，所以我在<a href=\"https://github.com/marketplace/actions/sftp-deploy\">SFTP Deploy</a>基础上加多了个在服务器执行命令的操作得到了<a href=\"https://github.com/izyhang/SFTP-Deploy-Action\">新·SFTP Deploy</a></p>\n<p>比方说解压+eggjs 重启</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">NODE_VERSION</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10.x\"</span> <span class=\"token comment\"># set this to the node version to use</span>\n  <span class=\"token key atrule\">TGZ_PATH</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./release.tgz\"</span>\n  <span class=\"token key atrule\">KEY_PATH</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"./private_key\"</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and Deploy\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.NODE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.NODE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> npm install<span class=\"token punctuation\">,</span> build<span class=\"token punctuation\">,</span> and test\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm install --production</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tar c\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          tar -zcf ../release.tgz .\n          cp ../release.tgz ${{ env.TGZ_PATH }}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> push\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> izyhang/SFTP<span class=\"token punctuation\">-</span>Deploy<span class=\"token punctuation\">-</span>Action@v1.1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_NAME }}\"</span>\n          <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_IP }}\"</span>\n          <span class=\"token key atrule\">ssh_private_key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SSH_PRIVATE_KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">local_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ env.TGZ_PATH }}\"</span>\n          <span class=\"token key atrule\">remote_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ secrets.SSH_TARGET_PATH }}\"</span>\n          <span class=\"token key atrule\">ssh_command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tar -zxf ${{ env.TGZ_PATH }};npm stop;npm start --env=prod\"</span></code></pre></div>","frontmatter":{"title":"前前前后后后","date":"February 29, 2020","tags":["eggjs","sqeuelize","github actions"],"categories":"Backend"}}},"pageContext":{"slug":"/qianqianqianhouhouhou/","previous":{"excerpt":"用的肯定很爽，少了一堆的编写，插件本身为我们生成代码，并且还会缓存起来，通过调用代替，避免频繁调用，看起来方便又高效，实际上有一个需要注意的点被忽略 0x0…","fields":{"slug":"/android-kotlin-layoutcontainer/"},"frontmatter":{"date":"September 26, 2019","title":"Kotlin androidExtensions findViewById缓存问题","tags":["kotlin"],"categories":"Android"}},"next":{"excerpt":"原文：https://proandroiddev.com/publishing-android-libraries-to-the-github-package-registry-part-1-7997be54ea5a…","fields":{"slug":"/fa-bu-android-ku-dao-github-packages/"},"frontmatter":{"date":"March 09, 2020","title":"发布Android库到GitHub Packages","tags":["libraries","gradle","github packages"],"categories":"Android"}}}},"staticQueryHashes":["2841359383"]}