{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter-inherited-widget/","result":{"data":{"site":{"siteMetadata":{"title":"Evil Mouth","author":{"name":"Evil Mouth"}}},"markdownRemark":{"id":"389d2fc7-082b-53c7-8a14-597355fa16e9","excerpt":"分析 Flutter 非常特殊的 InheritedWidget，仅次于 StatelessWidget 和 StatefulWidget InheritedWidget 介绍 Base class for widgets that efficiently propagate information down the…","html":"<p>分析 Flutter 非常特殊的 InheritedWidget，仅次于 StatelessWidget 和 StatefulWidget</p>\n<h2>InheritedWidget 介绍</h2>\n<blockquote>\n<p>Base class for widgets that efficiently propagate information down the tree.</p>\n</blockquote>\n<p>这是官方对 InheritedWidget 的介绍，大致意思就是使用 InheritedWidget 可以有效的将数据向下传播，也就是该 Widget 的子树都可以拿到这些数据。</p>\n<p><a href=\"https://www.youtube.com/watch?v=Zbm3hjPjQMk\">放个官方介绍视频</a></p>\n<h2>InheritedWidget 如何向下传播数据（共享数据）</h2>\n<p>要了解这个过程，先反向分析。</p>\n<p>根据上面视频了解到 Theme.of(context) 获取主题就是利用 InheritedWidget 的特性，那就从 of 开始分析</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">static</span> ThemeData <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bool shadowThemeOnly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> _InheritedTheme inheritedTheme <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>dependOnInheritedWidgetOfExactType<span class=\"token operator\">&lt;</span>_InheritedTheme<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/// 省略省略省略</span>\n  <span class=\"token keyword\">return</span> inheritedTheme<span class=\"token punctuation\">.</span>theme<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>给需要共享数据的 Widget 提供一个 of 方法是一种常用做法，在代码阅读上非常友好</p>\n</blockquote>\n<p>Theme Widget 通过 InheritedTheme（继承于 InheritedWidget）去共享 ThemeData，具体则是利用 BuildContext.dependOnInheritedWidgetOfExactType 实现。</p>\n<blockquote>\n<p>dependOnInheritedWidgetOfExactType 会使 子Widget 在 ThemeData 数据变动时<strong>重新构建</strong></p>\n</blockquote>\n<p>再继续往下看 dependOnInheritedWidgetOfExactType 做了什么，BuildContext.dependOnInheritedWidgetOfExactType 是一个空方法，具体在 Element 实现功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// 存储共享元素</span>\nMap<span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> InheritedElement<span class=\"token operator\">></span> _inheritedWidgets<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/// 存储依赖项</span>\nSet<span class=\"token operator\">&lt;</span>InheritedElement<span class=\"token operator\">></span> _dependencies<span class=\"token punctuation\">;</span>\n\n<span class=\"token metadata symbol\">@override</span>\nT dependOnInheritedWidgetOfExactType<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InheritedWidget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>Object aspect<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">_debugCheckStateIsActiveForAncestorLookup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// 通过实现存储在 Map 的 _inheritedWidgets 上取得共享元素 InheritedElement</span>\n  <span class=\"token keyword\">final</span> InheritedElement ancestor <span class=\"token operator\">=</span> _inheritedWidgets <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> _inheritedWidgets<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ancestor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>ancestor <span class=\"token operator\">is</span> InheritedElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dependOnInheritedElement</span><span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">:</span> aspect<span class=\"token punctuation\">)</span> <span class=\"token operator\">as</span> T<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  _hadUnsatisfiedDependencies <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token metadata symbol\">@override</span>\nInheritedWidget <span class=\"token function\">dependOnInheritedElement</span><span class=\"token punctuation\">(</span>InheritedElement ancestor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Object aspect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>ancestor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// 将共享数据元素添加为依赖项，所以当依赖变动时，当前元素会更新，从而更新状态</span>\n  _dependencies <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> HashSet<span class=\"token operator\">&lt;</span>InheritedElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ancestor<span class=\"token punctuation\">.</span><span class=\"token function\">updateDependencies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// 将该共享元素 InheritedElement 对应的 InheritedWidget 返回</span>\n  <span class=\"token comment\">/// 也就是在上面 Theme.of(context) 中拿到的 InheritedTheme</span>\n  <span class=\"token keyword\">return</span> ancestor<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过上面的源码可以看到有两个重要的成员 <em>inheritedWidgets 以及 _dependencies。</em>dependencies 涉及的是依赖更新，不是当前篇章的内容，_inheritedWidgets 才是能够<strong>向下传递数据</strong>的关键。</p>\n<p>先回想以下 Theme.of(context) 中的 context 是什么</p>\n<p>在 子Widget 中调用 Theme.of(context) 中，context 指的就是 当前子Widget对应的Element，也就是说 context.dependOnInheritedWidgetOfExactType 就是对 当前子Element 的调用，那自然 _inheritedWidgets 就是 当前子Element 的成员。</p>\n<blockquote>\n<p>向下传递就是让所以 子Widget 都持有 祖先共享数据 的一份拷贝指向，使得 子Widget 在获取 祖先共享数据 时十分方便快捷</p>\n</blockquote>\n<p>那为何 当前子Element 的 _inheritedWidgets 会有 <strong>祖先</strong> 的数据呢，答案就在 Element 本身一个方法上</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// Element 的实现</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_updateInheritance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>_active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _inheritedWidgets <span class=\"token operator\">=</span> _parent<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>_inheritedWidgets<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// InheritedElement 的实现</span>\n<span class=\"token metadata symbol\">@override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">_updateInheritance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>_active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> InheritedElement<span class=\"token operator\">></span> incomingWidgets <span class=\"token operator\">=</span> _parent<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>_inheritedWidgets<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>incomingWidgets <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    _inheritedWidgets <span class=\"token operator\">=</span> HashMap<span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> InheritedElement<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>incomingWidgets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    _inheritedWidgets <span class=\"token operator\">=</span> HashMap<span class=\"token operator\">&lt;</span>Type<span class=\"token punctuation\">,</span> InheritedElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  _inheritedWidgets<span class=\"token punctuation\">[</span>widget<span class=\"token punctuation\">.</span>runtimeType<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>_updateInheritance 会在 Element 处于激活状态下被调用</li>\n<li>_updateInheritance 会将 父Element 的 _inheritedWidgets 赋值给 当前Element 的 _inheritedWidgets</li>\n<li>InheritedElement 重写 _updateInheritance，并将自己写进 _inheritedWidgets</li>\n<li>以此完成 向下传递、数据共享</li>\n</ul>\n<h2>_dependencies 的作用</h2>\n<p>回到刚才两个重要成员中的另一个成员 <em>dependencies，</em>dependencies 起到的作用是当 祖先共享数据 发现变化时，子Widget 就会更新的作用</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">_dependencies <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> HashSet<span class=\"token operator\">&lt;</span>InheritedElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n_dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ancestor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nancestor<span class=\"token punctuation\">.</span><span class=\"token function\">updateDependencies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>_dependencies.add(ancestor); 也就是将 祖先元素 作为依赖项存储</li>\n<li>ancestor.updateDependencies(this, aspect); 则是 祖先元素 将 子元素 作为依赖者存储</li>\n<li>两者互相持有引用</li>\n</ul>\n<p>当 祖先元素共享数据 变化时，祖先元素会 rebuild，再而通过 Flutter Framework 调度走到 update() 方法</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/// InheritedElement 的成员</span>\n<span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Element<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> _dependents <span class=\"token operator\">=</span> HashMap<span class=\"token operator\">&lt;</span>Element<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储依赖者</span>\n\n<span class=\"token metadata symbol\">@override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updated</span><span class=\"token punctuation\">(</span>InheritedWidget oldWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>widget<span class=\"token punctuation\">.</span><span class=\"token function\">updateShouldNotify</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 判断是否需要更新</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">updated</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">covariant</span> ProxyWidget oldWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">notifyClients</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通知依赖者</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token metadata symbol\">@override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">notifyClients</span><span class=\"token punctuation\">(</span>InheritedWidget oldWidget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">_debugCheckOwnerBuildTargetExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'notifyClients'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> Element dependent <span class=\"token keyword\">in</span> _dependents<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 循环依赖者</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// check that it really is our descendant</span>\n      Element ancestor <span class=\"token operator\">=</span> dependent<span class=\"token punctuation\">.</span>_parent<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ancestor <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> ancestor <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        ancestor <span class=\"token operator\">=</span> ancestor<span class=\"token punctuation\">.</span>_parent<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> ancestor <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// check that it really depends on us</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>dependent<span class=\"token punctuation\">.</span>_dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">notifyDependent</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">,</span> dependent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通知依赖者</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token metadata symbol\">@protected</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">notifyDependent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">covariant</span> InheritedWidget oldWidget<span class=\"token punctuation\">,</span> Element dependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dependent<span class=\"token punctuation\">.</span><span class=\"token function\">didChangeDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用依赖者的 didChangeDependencies</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token metadata symbol\">@mustCallSuper</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">didChangeDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>_active<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// otherwise markNeedsBuild is a no-op</span>\n  <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">_debugCheckOwnerBuildTargetExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'didChangeDependencies'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">markNeedsBuild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重新构建</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>一开始 InheritedWidget 没有任何 依赖者，当有 子Widget 请求了数据（Theme.of）之后，便使得 祖先元素 和 子元素 互相绑定</p>\n</blockquote>\n<blockquote>\n<p>其实还有一种获取 祖先共享数据 的方法，并且不产生依赖关系 - BuildContext.getElementForInheritedWidgetOfExactType</p>\n</blockquote>\n<h2>aspect 的作用</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">T dependOnInheritedWidgetOfExactType<span class=\"token operator\">&lt;</span>T <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InheritedWidget</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Object aspect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInheritedWidget <span class=\"token function\">dependOnInheritedElement</span><span class=\"token punctuation\">(</span>InheritedElement ancestor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Object aspect <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再回顾 dependOnInheritedWidgetOfExactType、dependOnInheritedElement 有个 aspect 可选参数，具体是什么作用</p>\n<blockquote>\n<p>aspect 提供颗粒化共享数据</p>\n</blockquote>\n<p>假如一个祖先提供A、B两个数据，他有两个孩子，孩子C引用数据A，孩子D引用数据B。当只有数据A发生变化时，其实只需要重新构建孩子C，aspect就是提供这么一个过滤功能</p>\n<p>aspect 在 InheritedWidget 并没有使用，而是在 InheritedModel 作用体现，InheritedModel 可以通过 <a href=\"https://www.youtube.com/watch?v=ml5uefGgkaA\">官方视频</a> 了解</p>\n<p>在上面分析可得知 建立依赖关系 是双向的，祖先元素的 updateDependencies(Element dependent, Object aspect) 会被调用，在 InheritedModel 中重写了该方法</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">updateDependencies</span><span class=\"token punctuation\">(</span>Element dependent<span class=\"token punctuation\">,</span> Object aspect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> Set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> dependencies <span class=\"token operator\">=</span> <span class=\"token function\">getDependencies</span><span class=\"token punctuation\">(</span>dependent<span class=\"token punctuation\">)</span> <span class=\"token operator\">as</span> Set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dependencies <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> dependencies<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aspect <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setDependencies</span><span class=\"token punctuation\">(</span>dependent<span class=\"token punctuation\">,</span> HashSet<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>aspect <span class=\"token operator\">is</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDependencies</span><span class=\"token punctuation\">(</span>dependent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dependencies <span class=\"token operator\">?</span><span class=\"token operator\">?</span> HashSet<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>aspect <span class=\"token operator\">as</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果传了 aspect，则将其放入 HashSet 中放入 dependencies，并且已知 祖先更新会通知子元素（调用 notifyDependent），InheritedModel 也重写了该方法</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token metadata symbol\">@override</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">notifyDependent</span><span class=\"token punctuation\">(</span>InheritedModel<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> oldWidget<span class=\"token punctuation\">,</span> Element dependent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> Set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> dependencies <span class=\"token operator\">=</span> <span class=\"token function\">getDependencies</span><span class=\"token punctuation\">(</span>dependent<span class=\"token punctuation\">)</span> <span class=\"token operator\">as</span> Set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dependencies <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dependencies<span class=\"token punctuation\">.</span>isEmpty <span class=\"token operator\">||</span> widget<span class=\"token punctuation\">.</span><span class=\"token function\">updateShouldNotifyDependent</span><span class=\"token punctuation\">(</span>oldWidget<span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    dependent<span class=\"token punctuation\">.</span><span class=\"token function\">didChangeDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// 具体实现，通过 aspects.contains('a')) 是否包含 a或b 去过滤</span>\n<span class=\"token metadata symbol\">@override</span>\nbool <span class=\"token function\">updateShouldNotifyDependent</span><span class=\"token punctuation\">(</span>ABModel old<span class=\"token punctuation\">,</span> Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> aspects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> old<span class=\"token punctuation\">.</span>a <span class=\"token operator\">&amp;&amp;</span> aspects<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> old<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&amp;&amp;</span> aspects<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后在 子Widget 获取 祖先共享数据 时需要通过 InheritedModel.inheritFrom 去获取</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ABModel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InheritedModel</span><span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>BuildContext context<span class=\"token punctuation\">,</span> String aspect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> InheritedModel<span class=\"token punctuation\">.</span>inheritFrom<span class=\"token operator\">&lt;</span>MyModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> aspect<span class=\"token punctuation\">:</span> aspect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nABModel<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nABModel<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>官方状态管理库 Provider 就是利用 InheritedWidget 的特性实现</p>\n</blockquote>","frontmatter":{"title":"Flutter InheritedWidget","date":"September 04, 2020","tags":["flutter","widget","source"],"categories":"Flutter"}}},"pageContext":{"slug":"/flutter-inherited-widget/","previous":{"fields":{"slug":"/flutter-run-app/"},"frontmatter":{"title":"Flutter runApp"}},"next":null}},"staticQueryHashes":["2841359383"]}